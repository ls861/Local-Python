
def read_chain(zlow, zhigh, chain_MS, fit):
    
    import numpy as np
    normalisation = 9.7
    
    z = np.linspace(zlow, zhigh, 1000)

    redshift_arr = np.repeat(np.array([z]).T, len(chain_MS['beta_a']), axis=1).T

    beta_a_arr = np.array([chain_MS['beta_a']]).T
    beta_b_arr = np.array([chain_MS['beta_b']]).T
#    print(np.shape(redshift_arr), np.shape(beta_b_arr))
    beta_arr = beta_a_arr + redshift_arr*beta_b_arr
    beta_16_arr = np.percentile(beta_arr, 16, axis=0)
    beta_50_arr = np.median(beta_arr, axis=0)
    beta_84_arr = np.percentile(beta_arr, 84, axis=0)

    if fit == 'const_beta_ssfr_alpha' or fit == 'const_beta_ssfr_alpha_fixed_pbad':

        ssfr_a_arr = np.array([chain_MS['alphaN_a']]).T
        ssfr_b_arr = np.array([chain_MS['alphaN_b']]).T
        ssfr_arr = np.log10(ssfr_a_arr*(1.0+redshift_arr)**ssfr_b_arr) - 9.0
        ssfr_16_arr = np.percentile(ssfr_arr, 16, axis=0)
        ssfr_50_arr = np.median(ssfr_arr, axis=0)
        ssfr_84_arr = np.percentile(ssfr_arr, 84, axis=0)
        
        alpha_arr = ssfr_arr + normalisation
        alpha_16_arr = np.percentile(alpha_arr, 16, axis=0)
        alpha_50_arr = np.median(alpha_arr, axis=0)
        alpha_84_arr = np.percentile(alpha_arr, 84, axis=0)

    elif fit == 'const_beta_ssfr_alpha_new':

        # alphaN_a + alphaN_b*np.log10(1.0+z) + self.alphaNorm - 9.0 # new alphaN_a = old np.log10(alphaN_a)
        
        ssfr_a_arr = np.array([chain_MS['alphaN_a']]).T
        ssfr_b_arr = np.array([chain_MS['alphaN_b']]).T
        ssfr_arr = ssfr_a_arr + ssfr_b_arr*np.log10(1.0+redshift_arr) - 9.0
        ssfr_16_arr = np.percentile(ssfr_arr, 16, axis=0)
        ssfr_50_arr = np.median(ssfr_arr, axis=0)
        ssfr_84_arr = np.percentile(ssfr_arr, 84, axis=0)
        
        alpha_arr = ssfr_arr + normalisation
        alpha_16_arr = np.percentile(alpha_arr, 16, axis=0)
        alpha_50_arr = np.median(alpha_arr, axis=0)
        alpha_84_arr = np.percentile(alpha_arr, 84, axis=0)
        
    elif fit == 'const_beta_linear_alpha':
        
        # (alphaN_a + alphaN_b*z) # error if alphaN_a <0

        alpha_a_arr = np.array([chain_MS['alphaN_a']]).T
        alpha_b_arr = np.array([chain_MS['alphaN_b']]).T        
        alpha_arr = alpha_a_arr + redshift_arr*alpha_b_arr
        alpha_16_arr = np.percentile(alpha_arr, 16, axis=0)
        alpha_50_arr = np.median(alpha_arr, axis=0)
        alpha_84_arr = np.percentile(alpha_arr, 84, axis=0)

        ssfr_arr = alpha_arr - normalisation
        ssfr_16_arr = np.percentile(ssfr_arr, 16, axis=0)
        ssfr_50_arr = np.median(ssfr_arr, axis=0)
        ssfr_84_arr = np.percentile(ssfr_arr, 84, axis=0)
        
    if fit == 'const_beta_ssfr_alpha_fixed_pbad':
        pbad_arr = np.array([chain_MS['pbad'][:,0]]).T + redshift_arr*0
        pbad_16_arr = np.percentile(pbad_arr, 16, axis=0)
        pbad_50_arr = np.median(pbad_arr, axis=0)
        pbad_84_arr = np.percentile(pbad_arr, 84, axis=0)
    else:
        pbad_arr = np.array([chain_MS['pbad']]).T + redshift_arr*0
        pbad_16_arr = np.percentile(pbad_arr, 16, axis=0)
        pbad_50_arr = np.median(pbad_arr, axis=0)
        pbad_84_arr = np.percentile(pbad_arr, 84, axis=0)
          
#        print(chain_MS['pbad'][:,0])
#        chain_MS['pbad'] = chain_MS['pbad'][:,0]
#        exit
        
    sig0_arr = np.array([chain_MS['sig0']]).T + redshift_arr*0
    sig0_16_arr = np.percentile(sig0_arr, 16, axis=0)
    sig0_50_arr = np.median(sig0_arr, axis=0)
    sig0_84_arr = np.percentile(sig0_arr, 84, axis=0)

    k_arr = np.array([chain_MS['k']]).T + redshift_arr*0
    k_16_arr = np.percentile(k_arr, 16, axis=0)
    k_50_arr = np.median(k_arr, axis=0)
    k_84_arr = np.percentile(k_arr, 84, axis=0)
    
    outlier_mean_arr = np.array([chain_MS['outlier_mean']]).T + redshift_arr*0
    outlier_mean_16_arr = np.percentile(outlier_mean_arr, 16, axis=0)
    outlier_mean_50_arr = np.median(outlier_mean_arr, axis=0)
    outlier_mean_84_arr = np.percentile(outlier_mean_arr, 84, axis=0)
    
    outlier_sigma_arr = np.array([chain_MS['outlier_sigma']]).T + redshift_arr*0
    outlier_sigma_16_arr = np.percentile(outlier_sigma_arr, 16, axis=0)
    outlier_sigma_50_arr = np.median(outlier_sigma_arr, axis=0)
    outlier_sigma_84_arr = np.percentile(outlier_sigma_arr, 84, axis=0)
    
    # DICTIONARY
    
    dic = {}
    
    dic['z'] = z # array of 1000 numbers between zlow and zhigh
    
    dic['beta_16_arr'] = beta_16_arr # 1000 values (1 per redshift interval)
    dic['beta_50_arr'] = beta_50_arr # 1000 values (1 per redshift interval)
    dic['beta_84_arr'] = beta_84_arr # 1000 values (1 per redshift interval)
    
    dic['ssfr_16_arr'] = ssfr_16_arr # 1000 values (1 per redshift interval)
    dic['ssfr_50_arr'] = ssfr_50_arr # 1000 values (1 per redshift interval)
    dic['ssfr_84_arr'] = ssfr_84_arr # 1000 values (1 per redshift interval)

    dic['alpha_16_arr'] = alpha_16_arr # 1000 values (1 per redshift interval)
    dic['alpha_50_arr'] = alpha_50_arr # 1000 values (1 per redshift interval)
    dic['alpha_84_arr'] = alpha_84_arr # 1000 values (1 per redshift interval)
    
    dic['sig0_16_arr'] = sig0_16_arr # 1000 values (1 per redshift interval)
    dic['sig0_50_arr'] = sig0_50_arr # 1000 values (1 per redshift interval)
    dic['sig0_84_arr'] = sig0_84_arr # 1000 values (1 per redshift interval)

    dic['k_16_arr'] = k_16_arr # 1000 values (1 per redshift interval)
    dic['k_50_arr'] = k_50_arr # 1000 values (1 per redshift interval)
    dic['k_84_arr'] = k_84_arr # 1000 values (1 per redshift interval)
    
    dic['pbad_16_arr'] = pbad_16_arr # 1000 values (1 per redshift interval)
    dic['pbad_50_arr'] = pbad_50_arr # 1000 values (1 per redshift interval)
    dic['pbad_84_arr'] = pbad_84_arr # 1000 values (1 per redshift interval)

    dic['outlier_mean_16_arr'] = outlier_mean_16_arr # 1000 values (1 per redshift interval)
    dic['outlier_mean_50_arr'] = outlier_mean_50_arr # 1000 values (1 per redshift interval)
    dic['outlier_mean_84_arr'] = outlier_mean_84_arr # 1000 values (1 per redshift interval)    
    
    dic['outlier_sigma_16_arr'] = outlier_sigma_16_arr # 1000 values (1 per redshift interval)
    dic['outlier_sigma_50_arr'] = outlier_sigma_50_arr # 1000 values (1 per redshift interval)
    dic['outlier_sigma_84_arr'] = outlier_sigma_84_arr # 1000 values (1 per redshift interval)    
    
    return dic