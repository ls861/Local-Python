#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 25 15:25:58 2022

@author: lester
"""


import matplotlib.pyplot as plt
import numpy as np
import matplotlib as mpl

save=True

mpl.rcParams['font.family'] = 'Arial'
mpl.rc('image', cmap='jet')
cmap = mpl.cm.get_cmap('jet')
plt.rcParams['font.size'] = 24
plt.rcParams['axes.linewidth'] = 2
plt.rcParams['text.usetex'] = False
# plt.rcParams['text.usetex'] = True

figuresize = 7
fontsize_legend = 14
fontsize_axes = 20


string_mass = r'$\log(M \, / \, \mathrm{M_{\odot}})$'
string_sfr = r'$\log(\psi \, / \, \mathrm{M_{\odot} \, yr^{-1}})$'



def plot_big(mass, sfr, direction):
    for j in range(len(mass)):
    
        u=mass[j]       #x-position of the center
        v=sfr[j]      #y-position of the center
        a=0.1       #radius on the x-axis
        b=0.6      #radius on the y-axis
        t_rot=0.15 #rotation angle
        arrow_length = 0.15
        
        t = np.linspace(0, 2*np.pi, 100)
        Ell = np.array([a*np.cos(t) , b*np.sin(t)])  
             #u,v removed to keep the same center location
        R_rot = np.array([[np.cos(t_rot) , -np.sin(t_rot)],[np.sin(t_rot) , np.cos(t_rot)]])  
             #2-D rotation matrix
        
        Ell_rot = np.zeros((2,Ell.shape[1]))
        for i in range(Ell.shape[1]):
            Ell_rot[:,i] = np.dot(R_rot,Ell[:,i])
        
        # plt.plot( u+Ell[0,:] , v+Ell[1,:],'k'  )     #initial ellipse
        ax1.plot( u+Ell_rot[0,:] , v+Ell_rot[1,:],'red' )    #rotated ellipse
        ax1.arrow(x=u, y=v, dx=arrow_length*direction[j]*np.sin(t_rot), dy=-arrow_length*direction[j]*np.cos(t_rot), width=.01, head_width=0.05, facecolor='k', edgecolor='none') 
        
    ax1.scatter(mass, sfr, marker='.', color='red', zorder=10, label='Assigned to narrow main sequence')


def plot_small(mass, sfr, direction):
    for j in range(len(mass)):
    
        u=mass[j]       #x-position of the center
        v=sfr[j]      #y-position of the center
        a=0.05       #radius on the x-axis
        b=0.1      #radius on the y-axis
        t_rot=0.15 #rotation angle
        arrow_length = 0.2
        
        t = np.linspace(0, 2*np.pi, 100)
        Ell = np.array([a*np.cos(t) , b*np.sin(t)])  
             #u,v removed to keep the same center location
        R_rot = np.array([[np.cos(t_rot) , -np.sin(t_rot)],[np.sin(t_rot) , np.cos(t_rot)]])  
             #2-D rotation matrix
        
        Ell_rot = np.zeros((2,Ell.shape[1]))
        for i in range(Ell.shape[1]):
            Ell_rot[:,i] = np.dot(R_rot,Ell[:,i])
        
        # plt.plot( u+Ell[0,:] , v+Ell[1,:],'k'  )     #initial ellipse
        ax1.plot( u+Ell_rot[0,:] , v+Ell_rot[1,:],'blue' )    #rotated ellipse
        # plt.arrow(x=u, y=v, dx=arrow_length*(-1)*direction[j]*np.sin(t_rot), dy=-arrow_length*(-1)*direction[j]*np.cos(t_rot), width=.02, head_width=0.1, facecolor='k', edgecolor='none') 
        
    ax1.scatter(mass, sfr, marker='.', color='blue', label='Assigned to outlier distribution')


# =============================================================================
# PLOT 1
# =============================================================================
fig = plt.figure(figsize=(figuresize, figuresize))
ax1 = fig.add_axes([0, 0, 0.85, 0.84]) #[left, bottom, width, height]

intercept = 1.0
slope = 1.0
ax1.plot(np.array([7.5, 11.5]), slope*(np.array([7.5, 11.5])-9.7) + intercept, color='k')

# mass = np.array([8.3, 8.9, 9.0, 9.6])
# scatter = np.array([0.7, -0.7, 0.7, -0.7])
# direction = np.array([1, -1, 1, -1])
# sfr = slope*(mass-9.7) + intercept + scatter
# plot_big(mass, sfr, direction)

# mass = np.array([8.5, 9.3, 9.8])
# scatter = np.array([1.7, 1.3, 0.7])
# direction = np.array([1, 1, 1])
# sfr = slope*(mass-9.7) + intercept + scatter
# plot_small(mass, sfr, direction)

mass = np.array([8.3, 8.4, 8.5, 8.55, 8.7, 8.8, 9.0, 9.0, 9.05, 9.1, 9.3, 9.4, 9.4, 9.7])
direction = np.array([1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1])
sfr = np.array([-0.1, -0.7, 0.4, 0.0, -0.4, 0.5, -0.3, 0.95, 0.1, 0.55, 0.9, 0.45, 0.1, 0.6])
plot_big(mass, sfr, direction)

mass = np.array([9.08, 9.4, 9.5])
direction = np.array([1, 1, 1])
sfr = np.array([1.45, 1.5, 1.25])
plot_small(mass, sfr, direction)

# mass = np.random.normal(9, 0.3, 10)
# scatter = np.random.normal(0, 0.6, 10)
# sfr = slope*(mass-9.7) + intercept + scatter
# direction = scatter / np.abs(scatter)
# plot_big(mass, sfr, direction)
# plt.scatter(mass, sfr)

# =============================================================================
# BASICS
# =============================================================================

string_mass = r'$\log(M \, / \, \mathrm{M_{\odot}})$'
string_sfr = r'$\log(\psi \, / \, \mathrm{M_{\odot} \, yr^{-1}})$'

ax1.set_xlim(8., 10.)
ax1.set_xlabel(string_mass, labelpad=10)
ax1.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.xaxis.set_tick_params(which='major', size=10, width=2, direction='in', bottom='on', top='on')
ax1.xaxis.set_tick_params(which='minor', size=5, width=2, direction='in', bottom='on', top='on')
ax1.xaxis.set_tick_params(labelsize=fontsize_axes)

ax1.set_ylim(-1.8, 1.8)
ax1.set_ylabel(string_sfr, labelpad=10)
ax1.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.yaxis.set_tick_params(which='major', size=10, width=2, direction='in', left='on', right='on')
ax1.yaxis.set_tick_params(which='minor', size=5, width=2, direction='in', left='on', right='on')
ax1.yaxis.set_tick_params(labelsize=fontsize_axes)


ax1.legend(loc='lower right', frameon=True, fontsize=fontsize_legend, facecolor='w', framealpha=1)


save=True

if save:
    plt.savefig('low_scatter.png', dpi=300, transparent=False, bbox_inches='tight')
plt.show()




