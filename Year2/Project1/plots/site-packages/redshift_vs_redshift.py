
def redshift_vs_redshift(AD, ADx, ADx_subset, figuresize, fontsize_legend, fontsize_axes, save):

    import numpy as np
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import matplotlib.patches as mpatches
    from pylab import cm


    # =============================================================================
    # redshift vs redshift inc IRAC flags
    # =============================================================================

    idx1 = (ADx['field_AD']%2.0==0.0) # 2 == 0 clusters, 2 == 1 parallels, 1 == 0 both
    idx2 = (ADx['relflag_AD']==1.0) # relflag
    idx3 = (-2.5*np.log10(AD['b_H160']*1e-6) + 8.90 < 27.5) # H band cut

    # =============================================================================
    # adding lower mass cut
    # =============================================================================

    MCLmassLow = np.empty(ADx['redshift_BEAGLE'].shape)
    for i in range(len(MCLmassLow)):
        if ADx['redshift_BEAGLE'][i] < 2.1789654:
            MCLmassLow[i] = 8.0
        elif ADx['redshift_BEAGLE'][i] > 4.195:
            MCLmassLow[i] = 9.0
        else:
            MCLmassLow[i] = 6.91926521 + 0.49598529*ADx['redshift_BEAGLE'][i]
    idx4 = (ADx['mass_BEAGLE_stellar'] + ADx['mag_AD'] > (MCLmassLow) )


    # =============================================================================
    #
    # =============================================================================

    idx_IRAC_removed = np.logical_and(ADx['CH1_BEAGLE_input']<-60.0, ADx['CH2_BEAGLE_input']<-60.0)
    idx_KIRAC_removed = np.logical_and(idx_IRAC_removed, ADx['Ks_BEAGLE_input']<-60.0)


    idx7 = (ADx['min_chi2_BEAGLE']>0) & (ADx['min_chi2_BEAGLE']<13.28) # chi-squared

    # =============================================================================
    # the plot (z vs z)
    # =============================================================================

    idx_contour = np.logical_and(idx2,idx3) #relflag + H
    idx_contour = np.logical_and(idx_contour,idx1) #clusters
    idx_contour = np.logical_and(idx_contour,idx4) #lower mass
    idx_contour = np.logical_and(idx_contour,idx7) #chi2
    idx_IRAC = np.logical_and(idx_contour,idx_IRAC_removed) # idx for no IRAC objects
    # idx_KIRAC = np.logical_and(idx_contour,idx_KIRAC_removed) # idx for no KIRAC objects

    ###########
    nbins_x = 30
    nbins_y = 30
    min_x = np.min(ADx['redshift_AD'][idx_contour])
    max_x = np.max(ADx['redshift_AD'][idx_contour])
    binsize_x = (max_x-min_x)/nbins_x
    min_y = np.min(ADx['redshift_BEAGLE'][idx_contour])
    max_y = np.max(ADx['redshift_BEAGLE'][idx_contour])
    binsize_y = (min_y-max_y)/nbins_y
    ADx1 = plt.hist2d(ADx['redshift_AD'][idx_contour], ADx['redshift_BEAGLE'][idx_contour], bins=[40,40], range=[[min_x,max_x],[min_y,max_y]])
    ###########

    fig = plt.figure(figsize=(figuresize, figuresize))
    ax1 = fig.add_axes([0, 0, 1, 1]) #[left, bottom, width, height]

    # ax1.contourf((ADx1[1][1:]+ADx1[1][:-1])/2., \
    #                 (ADx1[2][1:]+ADx1[2][:-1])/2., np.log10(np.transpose(ADx1[0])), \
    #                  cmap=cm.gist_yarg)

    ax1.scatter(ADx['redshift_AD'][idx_contour], ADx['redshift_BEAGLE'][idx_contour], s=30, alpha=1.0, color='tab:grey', label='Preliminary Subset')
    ax1.scatter(ADx['redshift_AD'][idx_IRAC], ADx['redshift_BEAGLE'][idx_IRAC], s=30, alpha=1.0, color='blue', label='No Reliable IRAC Data')
    ax1.scatter(ADx_subset['redshift_AD'], ADx_subset['redshift_BEAGLE'], s=30, alpha=1.0, color='red', label='Final Subset')
    #ax1.plot((0, 10),(0, 10), color='lime')

    ax1.set_xlim(0.0, 10.0)
    ax1.set_xlabel(r'$z_{\mathrm{ASTRODEEP}}$', labelpad=10)
    ax1.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
    ax1.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
    ax1.xaxis.set_tick_params(which='major', size=10, width=2, direction='in', bottom='on', top='on')
    ax1.xaxis.set_tick_params(which='minor', size=5, width=2, direction='in', bottom='on', top='on')
    ax1.xaxis.set_tick_params(labelsize=fontsize_axes)

    ax1.set_ylim(0.0, 10.0)
    ax1.set_ylabel(r'$z_{\mathrm{BEAGLE}}$', labelpad=10)
    ax1.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
    ax1.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
    ax1.yaxis.set_tick_params(which='major', size=10, width=2, direction='in', left='on', right='on')
    ax1.yaxis.set_tick_params(which='minor', size=5, width=2, direction='in', left='on', right='on')
    ax1.yaxis.set_tick_params(labelsize=fontsize_axes)

    handles, labels = ax1.get_legend_handles_labels()
    # patch = mpatches.Patch(color='grey', label='Measurable Photo-z')
    # handles.append(patch)
    handles = [handles[2], handles[0], handles[1]]

    ax1.legend(handles=handles, bbox_to_anchor=(0.95, 0.05), loc=4, frameon=True, fontsize=fontsize_legend, framealpha=1)

    if save:
        plt.savefig('redshift_vs_redshift.png', dpi=300, transparent=False, bbox_inches='tight')
    plt.show()
