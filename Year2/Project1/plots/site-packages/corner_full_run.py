
## =============================================================================
## Corner Plots
## =============================================================================

def corner_full_run(chain_corner, run, fontsize_axes, string_slope, string_normalisation, string_scatter, string_pbad, string_outlier_mean, string_outlier_sigma, string_ssfrNorm, string_ssfrPower, save):

    import corner
    import numpy as np
    import matplotlib.pyplot as plt

    if run == '19' or run == '21':
        names_plot = ['ssfr a', 'beta a', 'sig0']
        data_corner = np.array([chain_corner['alphaN_a'][:], chain_corner['beta_a'][:], chain_corner['sig0'][:]]).T

    elif run == '22':
        names_plot = ['ssfr a', 'ssfr b', 'beta a', 'beta_b', 'sig0', 'pbad', 'outlier mean', 'outlier sigma']
        data_corner = np.array([chain_corner['alphaN_a'][:], chain_corner['alphaN_b'][:], chain_corner['beta_a'][:], chain_corner['beta_b'][:], chain_corner['sig0'][:], chain_corner['pbad'][:], chain_corner['outlier_mean'][:], chain_corner['outlier_sigma'][:]]).T

    elif run == '24' or run == '25':
        names_plot = [string_ssfrNorm, string_ssfrPower, string_slope, string_scatter, string_pbad, string_outlier_mean, string_outlier_sigma]
        data_corner = np.array([10**chain_corner['alphaN_a'][:], chain_corner['alphaN_b'][:], chain_corner['beta_a'][:], chain_corner['sig0'][:], chain_corner['pbad'][:], chain_corner['outlier_mean'][:], chain_corner['outlier_sigma'][:]]).T

    elif run == '27':
        names_plot = ['ssfr a', 'beta a', 'sig0', 'k', 'pbad', 'outlier mean', 'outlier sigma']
        data_corner = np.array([chain_corner['alphaN_a'][:], chain_corner['beta_a'][:], chain_corner['sig0'][:], chain_corner['k'][:], chain_corner['pbad'][:], chain_corner['outlier_mean'][:], chain_corner['outlier_sigma'][:]]).T

    else:
        names_plot = ['ssfr a', 'beta a', 'sig0', 'pbad', 'outlier mean', 'outlier sigma']
        data_corner = np.array([chain_corner['alphaN_a'][:], chain_corner['beta_a'][:], chain_corner['sig0'][:], chain_corner['pbad'][:], chain_corner['outlier_mean'][:], chain_corner['outlier_sigma'][:]]).T

    figure = corner.corner(data_corner, labels=names_plot,
                           quantiles=[0.16, 0.5, 0.84],
                           show_titles=True, title_kwargs={"fontsize": fontsize_axes}, labelpad=0.2, max_n_ticks=3)

    # plt.suptitle('n{}, burn:{}, cap:{}'.format(name, burn, cap).replace('_',' '), fontsize=20, y=1.1)
    if save:
        plt.savefig('corner_full_run.png', dpi=300, transparent=False, bbox_inches='tight')
    plt.show()
