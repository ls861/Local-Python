
def lower_mass_limit(mass_completeness_limits_0p90_new, ADx_subset, figuresize, fontsize_legend, fontsize_axes, string_mass, save):

    # =============================================================================
    # lower mass limit vs redshift plot
    # =============================================================================

    import numpy as np
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    mcl_mass_new_90 = mass_completeness_limits_0p90_new[1].data['mass']
    mcl_z_new_90 = mass_completeness_limits_0p90_new[1].data['redshift']
    fit_new_90 = np.polyfit(mcl_z_new_90, mcl_mass_new_90, 1)

    '''
    I think you could safely fit the first part with a straight line
     from z~2-4.5 or so, put a minimum at 8.1 and plateau at ~9.1
     (wherever your fitted line crosses 9.1).
    '''

    fit_new_90_2_to_4p5 = np.polyfit(mcl_z_new_90[(mcl_z_new_90>2.0)&(mcl_z_new_90<4.5)], mcl_mass_new_90[(mcl_z_new_90>2.0)&(mcl_z_new_90<4.5)], 1)

    mass_low_90 = 8.0
    mass_high_90 = 9.0

    z_low_90 = (mass_low_90 - fit_new_90_2_to_4p5[1]) / fit_new_90_2_to_4p5[0]
    z_high_90 = (mass_high_90 - fit_new_90_2_to_4p5[1]) / fit_new_90_2_to_4p5[0]

    fig = plt.figure(figsize=(figuresize, figuresize))
    ax1 = fig.add_axes([0, 0, 1, 1]) #[left, bottom, width, height]

    # ax1.scatter(mcl_z_new_90, mcl_mass_new_90, color='black', marker='x', s=100, zorder=3, linewidth=3)
    ax1.plot(np.linspace(z_low_90, z_high_90, 2), fit_new_90_2_to_4p5[1]+np.linspace(z_low_90, z_high_90, 2)*fit_new_90_2_to_4p5[0], color='black', linestyle='dashed', linewidth=3, label='Lower Mass Limit')
    ax1.plot((0.0, z_low_90), (mass_low_90, mass_low_90), color='black', linewidth=3, linestyle='dashed')
    ax1.plot((z_high_90, 8.0), (mass_high_90, mass_high_90), color='black', linewidth=3, linestyle='dashed')

    z_tmp = np.linspace(0, 8, 1000)
    TmassHigh = 9.244 + (0.753*np.minimum(z_tmp, 4.0)) - (0.090*(np.minimum(z_tmp, 4.0)**2)) # all galaxies
    ax1.plot(z_tmp, TmassHigh, color='black', linewidth=3, label='Upper Mass Limit')



    ax1.scatter(ADx_subset['redshift_BEAGLE'], ADx_subset['mass_BEAGLE_stellar'] + ADx_subset['mag_AD'], s=30, alpha=1.0, color='blue', label='BEAGLE Fitted Mass', zorder=2)

    ax1.scatter(ADx_subset['redshift_BEAGLE'], ADx_subset['mass_BEAGLE_stellar'], s=30, alpha=1.0, color='red', label='Magnification Corrected Mass', zorder=1)

    ax1.set_xlim(0.0, 8.0)
    ax1.set_xlabel(r'$z_{\mathrm{BEAGLE}}$', labelpad=10)
    ax1.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
    ax1.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
    ax1.xaxis.set_tick_params(which='major', size=10, width=2, direction='in', bottom='on', top='on')
    ax1.xaxis.set_tick_params(which='minor', size=5, width=2, direction='in', bottom='on', top='on')
    ax1.xaxis.set_tick_params(labelsize=fontsize_axes)

    ax1.set_ylim(6.7, 11.3)
    ax1.set_ylabel(string_mass, labelpad=10)
    ax1.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
    ax1.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
    ax1.yaxis.set_tick_params(which='major', size=10, width=2, direction='in', left='on', right='on')
    ax1.yaxis.set_tick_params(which='minor', size=5, width=2, direction='in', left='on', right='on')
    ax1.yaxis.set_tick_params(labelsize=fontsize_axes)

    ax1.legend(bbox_to_anchor=(0.95, 0.05), loc=4, frameon=True, fontsize=fontsize_legend, framealpha=1)

    if save:
        plt.savefig('lower_mass_limit.png', dpi=300, transparent=False, bbox_inches='tight')
    plt.show()
