#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 11 12:42:57 2021

@author: lester
"""

save=True

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Edit the font, font size, and axes width
mpl.rcParams['font.family'] = 'Arial'
mpl.rc('image', cmap='jet')
cmap = mpl.cm.get_cmap('jet')
plt.rcParams['font.size'] = 24
plt.rcParams['axes.linewidth'] = 2
plt.rcParams['text.usetex'] = False
# plt.rcParams['text.usetex'] = True

figuresize = 7
fontsize_legend = 16
fontsize_axes = 20
string_mass = r'$\log(M \, / \, \mathrm{M_{\odot}})$'
string_sfr = r'$\log(\psi \, / \, \mathrm{M_{\odot} \, yr^{-1}})$'

n = 1000000
mass = 10**np.random.uniform(5, 12, n) # 5 12
msa  = 10**np.random.uniform(6, 10, n) # 6 10
tau = 10**np.random.uniform(7, 10.5, n) # 7 10.5
tau_i = 1/np.random.uniform(1.0/(10**10.5), 1.0/(10**7.0), n)



log10_mass = np.log10(mass)
log10_msa = np.log10(msa)
log10_tau = np.log10(tau)
log10_tau_i = np.log10(tau_i)
'''
plt.hist(log10_mass, histtype='step')
plt.hist(log10_msa, histtype='step')
plt.hist(log10_tau, histtype='step')
plt.show()

plt.hist(log10_tau, histtype='step', density='True', label='uniform on log tau', color='r')
plt.hist(log10_tau_i, histtype='step', density='True', label='uniform on 1/tau', color='b')
plt.legend()
plt.show()
'''
x_tmp = np.array((10**5, 10**12))
log10_x_tmp = np.log10(x_tmp)



log10_sfr_c = log10_mass - log10_msa

norm_denom = (-tau*np.exp(-msa/tau)*(tau+msa)) + np.power(tau,2)
log10_norm = log10_mass - np.log10(norm_denom)
exp_term = -msa/tau
exp_idx = (exp_term <= -100.0)
exp_term[exp_idx] = -100.0
temp_sfr = log10_norm + log10_msa + np.log10(np.exp(exp_term))
log10_sfr_de = np.where(temp_sfr < -30.0, -30.0, temp_sfr)
idx = log10_msa < log10_tau

norm_denom_i = (-tau_i*np.exp(-msa/tau_i)*(tau_i+msa)) + np.power(tau_i,2)
log10_norm_i = log10_mass - np.log10(norm_denom_i)
exp_term_i = -msa/tau_i
exp_idx_i = (exp_term_i <= -100.0)
exp_term_i[exp_idx_i] = -100.0
temp_sfr_i = log10_norm_i + log10_msa + np.log10(np.exp(exp_term_i))
log10_sfr_de_i = np.where(temp_sfr_i < -30.0, -30.0, temp_sfr_i)
idx_i = log10_msa < log10_tau_i




# =============================================================================
# making same number of objects in each plot
# =============================================================================

# test =


'''
# constant
idx_tmp = (abs(log10_sfr_c)<3.5) & (log10_mass<10.5) & (log10_mass>6.5)
print(len(idx_tmp), sum(idx_tmp))
plt.hist2d(log10_mass[idx_tmp], log10_sfr_c[idx_tmp], bins=(50, 50), cmap='plasma', cmin=1)
plt.plot(log10_x_tmp, log10_x_tmp - 6, c='r', label='constant 10p6')
plt.plot(log10_x_tmp, log10_x_tmp - 6 + np.log10(2), c='r', linestyle='dotted', label='linear 10p6') # t = 6
plt.plot(log10_x_tmp, log10_x_tmp - 10, c='r', label='constant 10p10') # t = 10
plt.plot(log10_x_tmp, log10_x_tmp - 10 - np.log10(np.exp(1.0)-2.0), c='r', linestyle='dashed', label='ridge') # ridge if t = tau = 10
plt.plot(log10_x_tmp, log10_x_tmp - 10 + np.log10(2), c='r', linestyle='dotted', label='linear 10p10') # t = 10
plt.xlim(6.5, 10.5)
plt.ylim(-3.5, 3.5)
plt.show()
'''

# DE uniform log tau

# idx_tmp = (abs(log10_sfr_de)<3.5) & (log10_mass<10.5) & (log10_mass>6.5)
# print(len(idx_tmp), sum(idx_tmp))
# plt.hist2d(log10_mass[idx_tmp][:int(n/4)], log10_sfr_de[idx_tmp][:int(n/4)], bins=(50, 50), cmap='plasma', cmin=1)
# # plt.plot(log10_x_tmp, log10_x_tmp - 6, c='r', label='constant 10p6')
# # plt.plot(log10_x_tmp, log10_x_tmp - 6 + np.log10(2), c='r', linestyle='dotted', label='linear 10p6') # t = 6
# # plt.plot(log10_x_tmp, log10_x_tmp - 10, c='r', label='constant 10p10') # t = 10
# plt.plot(log10_x_tmp, log10_x_tmp - 10 - np.log10(np.exp(1.0)-2.0), c='black', label='ridge', linewidth=3, linestyle='dashed') # ridge if t = tau = 10
# # plt.plot(log10_x_tmp, log10_x_tmp - 10 + np.log10(2), c='r', linestyle='dotted', label='linear 10p10') # t = 10
# plt.xlim(6.5, 10.5)
# plt.ylim(-3.5, 3.5)
# plt.show()



'''

# MAKING LOOK BETTER
fig = plt.figure(figsize=(figuresize, figuresize))
ax1 = fig.add_axes([0, 0, 0.85, 0.84]) #[left, bottom, width, height]
idx_tmp = (log10_sfr_de>-3.5) & (log10_sfr_de<3.5) & (log10_mass>6.5) & (log10_mass<10.5)
print(len(idx_tmp), sum(idx_tmp))
h = ax1.hist2d(log10_mass[idx_tmp][:int(n/4)], log10_sfr_de[idx_tmp][:int(n/4)], bins=(50, 50), cmap='plasma', cmin=1, vmin=1, vmax=350)
ax1.plot(log10_x_tmp, log10_x_tmp - 10 - np.log10(np.exp(1.0)-2.0), c='w', label='ridge', linewidth=3, linestyle='dashed') # ridge if t = tau = 10

ax1.set_xlim(6.5, 10.5)
ax1.set_xlabel(string_mass, labelpad=10)
ax1.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.xaxis.set_tick_params(which='major', size=10, width=2, direction='out', bottom='on')
ax1.xaxis.set_tick_params(which='minor', size=5, width=2, direction='out', bottom='on')
ax1.xaxis.set_tick_params(labelsize=fontsize_axes)

ax1.set_ylim(-3.5, 3.5)
ax1.set_ylabel(string_sfr, labelpad=10)
ax1.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.yaxis.set_tick_params(which='major', size=10, width=2, direction='out', left='on')
ax1.yaxis.set_tick_params(which='minor', size=5, width=2, direction='out', left='on')
ax1.yaxis.set_tick_params(labelsize=fontsize_axes)

#ax1.legend(bbox_to_anchor=(1, 1), loc=1, frameon=False, fontsize=fontsize_legend)

cbaxes = fig.add_axes([0.85, 0, 0.05, 0.84]) #[left, bottom, width, height]
cb = plt.colorbar(h[3], cax = cbaxes)

cb.set_ticks([100, 200])
cb.set_ticklabels([100, 200])
cb.set_label('Count', rotation=270, labelpad=30)
cb.ax.tick_params(axis='y', size=5, width=2, direction='in', labelsize=fontsize_axes)


# if save:
#     plt.savefig('old_SFH_prior_heatplot.png', dpi=300, transparent=False, bbox_inches='tight')
plt.show()





# DE uniform 1/tau
# idx_tmp = (abs(log10_sfr_de_i)<3.5) & (log10_mass<10.5) & (log10_mass>6.5)
# print(len(idx_tmp), sum(idx_tmp))
# plt.hist2d(log10_mass[idx_tmp][:int(n/4)], log10_sfr_de_i[idx_tmp][:int(n/4)], bins=(50, 50), cmap='plasma', cmin=1)
# # plt.plot(log10_x_tmp, log10_x_tmp - 6, c='r', label='constant 10p6')
# # plt.plot(log10_x_tmp, log10_x_tmp - 6 + np.log10(2), c='r', linestyle='dotted', label='linear 10p6') # t = 6
# # plt.plot(log10_x_tmp, log10_x_tmp - 10, c='r', label='constant 10p10') # t = 10
# plt.plot(log10_x_tmp, log10_x_tmp - 10 - np.log10(np.exp(1.0)-2.0), c='black', linewidth=3, linestyle='dashed', label='ridge') # ridge if t = tau = 10
# # plt.plot(log10_x_tmp, log10_x_tmp - 10 + np.log10(2), c='r', linestyle='dotted', label='linear 10p10') # t = 10
# plt.xlim(6.5, 10.5)
# plt.ylim(-3.5, 3.5)
# plt.show()


# MAKING LOOK BETTER
fig = plt.figure(figsize=(figuresize, figuresize))
ax1 = fig.add_axes([0, 0, 0.85, 0.84]) #[left, bottom, width, height]
idx_tmp = (log10_sfr_de_i>-3.5) & (log10_sfr_de_i<3.5) & (log10_mass>6.5) & (log10_mass<10.5)
print(len(idx_tmp), sum(idx_tmp))
h = ax1.hist2d(log10_mass[idx_tmp][:int(n/4)], log10_sfr_de_i[idx_tmp][:int(n/4)], bins=(50, 50), cmap='plasma', cmin=1, vmin=1, vmax=350)
ax1.plot(log10_x_tmp, log10_x_tmp - 10 - np.log10(np.exp(1.0)-2.0), c='w', linewidth=3, linestyle='dashed', label='ridge') # ridge if t = tau = 10

ax1.set_xlim(6.5, 10.5)
ax1.set_xlabel(string_mass, labelpad=10)
ax1.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.xaxis.set_tick_params(which='major', size=10, width=2, direction='out', bottom='on')
ax1.xaxis.set_tick_params(which='minor', size=5, width=2, direction='out', bottom='on')
ax1.xaxis.set_tick_params(labelsize=fontsize_axes)

ax1.set_ylim(-3.5, 3.5)
ax1.set_ylabel(string_sfr, labelpad=10)
ax1.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.yaxis.set_tick_params(which='major', size=10, width=2, direction='out', left='on')
ax1.yaxis.set_tick_params(which='minor', size=5, width=2, direction='out', left='on')
ax1.yaxis.set_tick_params(labelsize=fontsize_axes)

#ax1.legend(bbox_to_anchor=(1, 1), loc=1, frameon=False, fontsize=fontsize_legend)

cbaxes = fig.add_axes([0.85, 0, 0.05, 0.84]) #[left, bottom, width, height]
cb = plt.colorbar(h[3], cax = cbaxes)

cb.set_ticks([100, 200])
cb.set_ticklabels([100, 200])
cb.set_label('Count', rotation=270, labelpad=30)
cb.ax.tick_params(axis='y', size=5, width=2, direction='in', labelsize=fontsize_axes)


# if save:
#     plt.savefig('new_SFH_prior_heatplot.png', dpi=300, transparent=False, bbox_inches='tight')
plt.show()

'''

'''
# DE uniform log tau RISING ONLY
idx_tmp = abs(log10_sfr_de[idx]) < 5
plt.hist2d(log10_mass[idx][idx_tmp], log10_sfr_de[idx][idx_tmp], bins=(50, 50), cmap='plasma', cmin=1)
plt.plot(log10_x_tmp, log10_x_tmp - 6, c='r', label='constant 10p6')
plt.plot(log10_x_tmp, log10_x_tmp - 6 + np.log10(2), c='r', linestyle='dotted', label='linear 10p6') # t = 6
plt.plot(log10_x_tmp, log10_x_tmp - 10, c='r', label='constant 10p10') # t = 10
plt.plot(log10_x_tmp, log10_x_tmp - 10 - np.log10(np.exp(1.0)-2.0), c='r', linestyle='dashed', label='ridge') # ridge if t = tau = 10
plt.plot(log10_x_tmp, log10_x_tmp - 10 + np.log10(2), c='r', linestyle='dotted', label='linear 10p10') # t = 10
plt.xlim(6.5, 10.5)
plt.ylim(-3.5, 3.5)
plt.show()
'''


#%%
# COMBINED



# MAKING LOOK BETTER
fig = plt.figure(figsize=(figuresize, figuresize))
ax1 = fig.add_axes([0, 0, 0.85, 0.84]) #[left, bottom, width, height]
idx_tmp = (log10_sfr_de>-3.5) & (log10_sfr_de<3.5) & (log10_mass>6.5) & (log10_mass<10.5)
print(len(idx_tmp), sum(idx_tmp))
h = ax1.hist2d(log10_mass[idx_tmp][:int(n/4)], log10_sfr_de[idx_tmp][:int(n/4)], bins=(50, 50), cmap='plasma', cmin=1, vmin=1, vmax=350)
ax1.plot(log10_x_tmp, log10_x_tmp - 10 - np.log10(np.exp(1.0)-2.0), c='w', label='ridge', linewidth=5, linestyle='dashed') # ridge if t = tau = 10

ax1.set_xlim(6.5, 10.5)
ax1.set_xlabel(string_mass, labelpad=10)
ax1.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.xaxis.set_tick_params(which='major', size=10, width=2, direction='out', bottom='on')
ax1.xaxis.set_tick_params(which='minor', size=5, width=2, direction='out', bottom='on')
ax1.xaxis.set_tick_params(labelsize=fontsize_axes)

ax1.set_ylim(-3.5, 3.5)
ax1.set_ylabel(string_sfr, labelpad=10)
ax1.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.yaxis.set_tick_params(which='major', size=10, width=2, direction='out', left='on')
ax1.yaxis.set_tick_params(which='minor', size=5, width=2, direction='out', left='on')
ax1.yaxis.set_tick_params(labelsize=fontsize_axes)

#ax1.legend(bbox_to_anchor=(1, 1), loc=1, frameon=False, fontsize=fontsize_legend)

# cbaxes = fig.add_axes([0.85, 0, 0.05, 0.84]) #[left, bottom, width, height]
# cb = plt.colorbar(h[3], cax = cbaxes)

# cb.set_ticks([100, 200])
# cb.set_ticklabels([100, 200])
# cb.set_label('Count', rotation=270, labelpad=30)
# cb.ax.tick_params(axis='y', size=5, width=2, direction='in', labelsize=fontsize_axes)


# MAKING LOOK BETTER

ax2 = fig.add_axes([0.9, 0, 0.85, 0.84]) #[left, bottom, width, height]
idx_tmp = (log10_sfr_de_i>-3.5) & (log10_sfr_de_i<3.5) & (log10_mass>6.5) & (log10_mass<10.5)
print(len(idx_tmp), sum(idx_tmp))
h = ax2.hist2d(log10_mass[idx_tmp][:int(n/4)], log10_sfr_de_i[idx_tmp][:int(n/4)], bins=(50, 50), cmap='plasma', cmin=1, vmin=1, vmax=350)
ax2.plot(log10_x_tmp, log10_x_tmp - 10 - np.log10(np.exp(1.0)-2.0), c='w', linewidth=5, linestyle='dashed', label='ridge') # ridge if t = tau = 10

ax2.set_xlim(6.5, 10.5)
ax2.set_xlabel(string_mass, labelpad=10)
ax2.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax2.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax2.xaxis.set_tick_params(which='major', size=10, width=2, direction='out', bottom='on')
ax2.xaxis.set_tick_params(which='minor', size=5, width=2, direction='out', bottom='on')
ax2.xaxis.set_tick_params(labelsize=fontsize_axes)

ax2.set_ylim(-3.5, 3.5)
# ax2.set_ylabel(string_sfr, labelpad=10)
ax2.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax2.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax2.yaxis.set_tick_params(which='major', size=0, width=2, direction='out', left='on')
ax2.yaxis.set_tick_params(which='minor', size=0, width=2, direction='out', left='on')
ax2.yaxis.set_tick_params(labelsize=0)

#ax1.legend(bbox_to_anchor=(1, 1), loc=1, frameon=False, fontsize=fontsize_legend)

cbaxes = fig.add_axes([1.8, 0, 0.05, 0.84]) #[left, bottom, width, height]
# cbaxes = fig.add_axes([2.7, 0, 0.05, 0.84]) #[left, bottom, width, height]

cb = plt.colorbar(h[3], cax = cbaxes)

cb.set_ticks([100, 200])
cb.set_ticklabels([100, 200])
# cb.set_label('Count', rotation=270, labelpad=30)
cb.ax.tick_params(axis='y', size=5, width=2, direction='in', labelsize=fontsize_axes)

# ax1.title.set_text(r'$\mathrm{Uniform} \, \log (\tau_\mathrm{SFR})$')
# ax2.title.set_text(r'$\mathrm{Uniform} \, 1 / \tau_\mathrm{SFR}$')

# 3rd plot

ax3 = fig.add_axes([-1.1, 0, 0.85, 0.84]) #[left, bottom, width, height]

ax3.hist(log10_tau, histtype='step', density='True', label=r'$\mathrm{Uniform} \, \log (\tau_\mathrm{SFR})$', color='r', linewidth=5)
ax3.hist(log10_tau_i, histtype='step', density='True', label=r'$\mathrm{Uniform} \, 1 / \tau_\mathrm{SFR}$', color='b', linewidth=5)



ax3.set_xlim(6.8, 10.7)
ax3.set_xlabel(r'$\log (\tau_\mathrm{SFR})$', labelpad=10)
ax3.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax3.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax3.xaxis.set_tick_params(which='major', size=10, width=2, direction='out', bottom='on')
ax3.xaxis.set_tick_params(which='minor', size=5, width=2, direction='out', bottom='on')
ax3.xaxis.set_tick_params(labelsize=fontsize_axes)

# ax3.set_ylim(-3.5, 3.5)
ax3.set_ylabel('Arbitrary Weighting', labelpad=10)
# ax3.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
# ax3.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax3.yaxis.set_tick_params(which='major', size=0, width=2, direction='out', left='on')
ax3.yaxis.set_tick_params(which='minor', size=0, width=2, direction='out', left='on')
ax3.yaxis.set_tick_params(labelsize=0)

ax3.legend(loc='upper right', frameon=True, fontsize=fontsize_axes, facecolor='w', framealpha=1)

#####

ax1.text(6.6, 3, r'$\mathrm{Uniform} \, \log (\tau_\mathrm{SFR})$', fontsize=fontsize_axes)
ax2.text(6.6, 3, r'$\mathrm{Uniform} \, 1 / \tau_\mathrm{SFR}$', fontsize=fontsize_axes)


if save:
    plt.savefig('SFH_prior_heatplot.png', dpi=300, transparent=False, bbox_inches='tight')
plt.show()

mpl.rcParams.update(mpl.rcParamsDefault)
