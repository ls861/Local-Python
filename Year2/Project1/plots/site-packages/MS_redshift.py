
# =============================================================================
# MS colour coded by redshift
# =============================================================================

def MS_redshift(ADx_subset, medians, normalisation, figuresize, fontsize_axes, string_mass, string_sfr, save):

    import numpy as np
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    fig = plt.figure(figsize=(figuresize, figuresize))
    ax1 = fig.add_axes([0, 0, 0.85, 0.84]) #[left, bottom, width, height]
    
    #ax1.plot((0, 20), (-10, 10), color='k', alpha=0.5, linestyle='dashed')
    #ax1.plot((0, 20), (-9, 11), color='k', alpha=0.5, linestyle='dashed')
    #ax1.plot((0, 20), (-8, 12), color='k', alpha=0.5, linestyle='dashed')
    
    x_tmp = np.array((8, 10))
    # ax1.plot(x_tmp, np.log10(medians['alphaN_a']*(1+2)**medians['alphaN_b']) + normalisation - 9.0 + (medians['beta_a'] + 2*medians['beta_b'])*(x_tmp-normalisation), color='k', alpha=0.5, linestyle='dashed')
    # ax1.plot(x_tmp, np.log10(medians['alphaN_a']*(1+3)**medians['alphaN_b']) + normalisation - 9.0 + (medians['beta_a'] + 3*medians['beta_b'])*(x_tmp-normalisation), color='k', alpha=0.5, linestyle='dashed')
    # ax1.plot(x_tmp, np.log10(medians['alphaN_a']*(1+4)**medians['alphaN_b']) + normalisation - 9.0 + (medians['beta_a'] + 4*medians['beta_b'])*(x_tmp-normalisation), color='k', alpha=0.5, linestyle='dashed')
    # ax1.plot(x_tmp, np.log10(medians['alphaN_a']*(1+5)**medians['alphaN_b']) + normalisation - 9.0 + (medians['beta_a'] + 5*medians['beta_b'])*(x_tmp-normalisation), color='k', alpha=0.5, linestyle='dashed')
    # ax1.plot(x_tmp, np.log10(medians['alphaN_a']*(1+6)**medians['alphaN_b']) + normalisation - 9.0 + (medians['beta_a'] + 6*medians['beta_b'])*(x_tmp-normalisation), color='k', alpha=0.5, linestyle='dashed')
    
    # ax1.plot(x_tmp, ((medians['beta_a'] + medians['beta_b']*1.25)*(x_tmp-normalisation)) + medians['alphaN_a'] + medians['alphaN_b']*np.log10(1+1.25) + normalisation - 9.0, color='k', alpha=0.5, linestyle='dashed')
    # ax1.plot(x_tmp, ((medians['beta_a'] + medians['beta_b']*6)*(x_tmp-normalisation)) + medians['alphaN_a'] + medians['alphaN_b']*np.log10(1+6) + normalisation - 9.0, color='k', alpha=0.5, linestyle='dashed')    

    ax1.plot((normalisation, normalisation), (-10, 10), color='k', alpha=0.7, linestyle='dashed')
    
    idx_sort = np.argsort(ADx_subset['redshift_BEAGLE'])
    scatter = ax1.scatter(ADx_subset['mass_BEAGLE_stellar'][idx_sort], ADx_subset['sfr_BEAGLE_instant'][idx_sort], c=ADx_subset['redshift_BEAGLE'][idx_sort], vmin=1.25, vmax=6.5, alpha=1.0)
    
    ax1.set_xlim(6.5, 10.5)
    ax1.set_xlabel(string_mass, labelpad=10)
    ax1.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
    ax1.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
    ax1.xaxis.set_tick_params(which='major', size=10, width=2, direction='in', bottom='on', top='on')
    ax1.xaxis.set_tick_params(which='minor', size=5, width=2, direction='in', bottom='on', top='on')
    ax1.xaxis.set_tick_params(labelsize=fontsize_axes)
    
    ax1.set_ylim(-2.5, 3.5)
    ax1.set_ylabel(string_sfr, labelpad=10)
    ax1.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
    ax1.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
    ax1.yaxis.set_tick_params(which='major', size=10, width=2, direction='in', left='on', right='on')
    ax1.yaxis.set_tick_params(which='minor', size=5, width=2, direction='in', left='on', right='on')
    ax1.yaxis.set_tick_params(labelsize=fontsize_axes)
    
    #ax1.legend(bbox_to_anchor=(1, 1), loc=1, frameon=False, fontsize=fontsize_legend)
    
    cbaxes = fig.add_axes([0.85, 0, 0.05, 0.84]) #[left, bottom, width, height]
    cb = plt.colorbar(scatter, cax = cbaxes)
    
    cb.set_ticks([0, 1, 2, 3, 4, 5, 6, 7])
    cb.set_ticklabels(['', 1, 2, 3, 4, 5, 6, ''])
    cb.set_label('Redshift', rotation=270, labelpad=30)
    cb.ax.tick_params(axis='y', size=5, width=2, direction='in', labelsize=fontsize_axes)
    
    if save:
        plt.savefig('MS_redshift.png', dpi=300, transparent=False, bbox_inches='tight')
    plt.show()