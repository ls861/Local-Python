#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Feb  3 13:42:49 2021

@author: lester
"""

#http://astrodeep.u-strasbg.fr/ff/?ffid=FF_M0717CL&id=1315&img=o_H160&cm=cubehelix
#http://astrodeep.u-strasbg.fr/ff/data/SED/MACS0717cl/SED_1315.png
#http://astrodeep.u-strasbg.fr/ff/?ffid=FF_A2744CL&id=15&img=o_H160&cm=cubehelix

import urllib # py2
#import urllib.request # py3 https://stackoverflow.com/questions/17960942/attributeerror-module-object-has-no-attribute-urlretrieve
from IPython.display import display
from wand.image import Image as WImage
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from astropy.io import fits
from astropy.wcs import WCS
import webbrowser
import numpy as np
from astropy.nddata import Cutout2D


save=True
# save=False

figuresize = 7
fontsize_axes = 14

# filename = '/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/BEAGLE_dust_install/analysis/pick_a_peak/pick_a_peak.fits'

filename = '/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/BEAGLE_dust_install/analysis/kelly_input/scenario_33_clusters_z1p25-2p0.fits'

#checking visual inspection with Emma
#filename = '/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/BEAGLE_dust_install/analysis/kelly_input/scenario_25_vis3_check_clusters.fits'
#filename = '/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/BEAGLE_dust_install/analysis/kelly_input/scenario_25_vis3_check_parallels.fits'

fields = ['0A2744C','1A2744P','2M0416C','3M0416P','4M0717C','5M0717P','6M1149C','7M1149P']
fields_FF = ['A2744CL', 'A2744PAR', 'M0416CL', 'M0416PAR', 'MACS0717cl', 'MACS0717par', 'MACS1149cl', 'MACS1149par']
fields_FF_URL = ['A2744CL', 'A2744PAR', 'M0416CL', 'M0416PAR', 'M0717CL', 'M0717PAR', 'M1149CL', 'M1149PAR']
fields_for_images = ['abell2744', 'abell2744', 'macs0416', 'macs0416', 'macs0717', 'macs0717', 'macs1149', 'macs1149']
filters = ['435', '606', '814', '105', '125', '140', '160', 'Ks']
filter_names = ['F435W', 'F606W', 'F814W', 'F105W', 'F125W', 'F140W', 'F160W', 'Ks']
# filters = ['435', '606', '814', '105', '125', '140', '160']

field_label = ['Abell 2744','Abell 2744','MACS0416','MACS0416','MACS0717','MACS0717','MACS1149','MACS1149']

d = fits.open(filename)
#print(d.info())
# print(d[1].columns)

field_AD = d[1].data['field_AD']

id_AD = d[1].data['id_AD']
z_AD = d[1].data['redshift_AD']
mass_AD = d[1].data['mass_AD_neb']

id_BEAGLE = d[1].data['id_BEAGLE']
z_BEAGLE = d[1].data['redshift_BEAGLE']
mass_BEAGLE = d[1].data['mass_BEAGLE_stellar']

RA = d[1].data['RA_AD']
DEC = d[1].data['DEC_AD']



# =============================================================================
# the real stuff
# =============================================================================


f, axarr = plt.subplots(5,len(filters),figsize=(figuresize,0.7*figuresize))
count = -1
for i in range(len(id_AD)):

    uid = str(int(field_AD[i]))+'_'+str(int(id_AD[i]))

    if uid in ['2_541', '2_1192', '4_1301', '6_2371', '6_2907']:
    # if uid in ['2_541']:
        # print('UID', uid)
        count += 1

        FIELD = int(d[1].data['field_AD'][i])

        print(' \n \n{}\nASTRODEEP: id{} z{:.2f} m{:.2f}\nBEAGLE: id{} z{:.2f} m{:.2f}'.format(fields_FF[FIELD], int(id_AD[i]), z_AD[i], mass_AD[i], int(id_BEAGLE[i]), z_BEAGLE[i], mass_BEAGLE[i]))

        # get image per filter
        if FIELD == 0 or FIELD == 2:
            paras = ['','','','','','','']
            epochs = ['','','','','','','']
        elif FIELD == 4:
            paras = ['','','','','','','']
            epochs = ['-epoch1','-epoch1','-epoch1','-epoch1','-epoch1','-epoch1','-epoch1']
        elif FIELD == 6:
            paras = ['','','','','','','']
            epochs = ['-epoch2','-epoch2','-epoch1','-epoch1','-epoch1','-epoch1','-epoch1']

        elif FIELD == 1:
            paras = ['-hffpar','-hffpar','-hffpar','-hffpar','-hffpar','-hffpar','-hffpar']
            epochs = ['','','','-epoch2','-epoch2','-epoch2','-epoch2']
        elif FIELD == 3:
            paras = ['-hffpar','-hffpar','-hffpar','-hffpar','-hffpar','-hffpar','-hffpar']
            epochs = ['-epoch2','-epoch2','-epoch2','','','','']
        elif FIELD == 5:
            paras = ['-hffpar','-hffpar','-hffpar','-hffpar','-hffpar','-hffpar','-hffpar']
            epochs = ['-epoch1','-epoch1','-epoch1','-epoch1','-epoch1','-epoch1','-epoch1']
        elif FIELD == 7:
            paras = ['-hffpar','-hffpar','-hffpar','-hffpar','-hffpar','-hffpar','-hffpar']
            epochs = ['-epoch1','-epoch1','-epoch1','-epoch2','-epoch2','-epoch2','-epoch1']


        # PLOT individual filters

        for fi in range(len(filters)):
            if fi <= 2:
                camera = 'acs'
            else:
                camera = 'wfc3'

            s_zoom = 200
            size = (s_zoom/2, s_zoom/2)     # pixels


            if fi == len(filters)-1:
                if FIELD == 0:
                    image_file = '/Users/lester/Documents/Ks/ADP.2016-06-06T12_19_44.047.fits'
                elif FIELD == 2:
                    image_file = '/Users/lester/Documents/Ks/ADP.2016-06-06T12_19_44.049.fits'
                elif FIELD == 4:
                    image_file = '/Users/lester/Documents/Ks/ADP.2016-06-06T12_19_44.055.fits'
                elif FIELD == 6:
                    image_file = '/Users/lester/Documents/Ks/ADP.2016-06-06T12_19_44.057.fits'

                size = (0.3*s_zoom/2, 0.3*s_zoom/2)     # pixels

                # axarr[fi].scatter(s_zoom/4., s_zoom/4., marker='o', color='r', s=500, facecolors='none')
            else:
#                image_file = '/Users/lester/BEAGLE/FF_images/plotting_task/{}/hlsp_frontier_hst_{}-30mas_{}{}_f{}w_v1.0{}_drz.fits'.format(FIELD, camera, fields_for_images[FIELD], paras[fi], filters[fi], epochs[fi])
#                size = (s_zoom, s_zoom)     # pixels
#                axarr[fi].scatter(s_zoom/2., s_zoom/2., marker='o', color='r', s=500, facecolors='none')

                image_file = '/Users/lester/BEAGLE/FF_images/plotting_task/{}/hlsp_frontier_hst_{}-30mas_{}{}_f{}w_v1.0{}_drz.fits'.format(FIELD, camera, fields_for_images[FIELD], paras[fi], filters[fi], epochs[fi])

                # axarr[fi].scatter(s_zoom/4., s_zoom/4., marker='o', color='r', s=500, facecolors='none')


            image_data = fits.getdata(image_file)
            w = WCS(image_file)
            pix = w.wcs_world2pix(RA[i], DEC[i], 0)
            position = (pix[0], pix[1])

            cutout = Cutout2D(image_data, position, size)

            axarr[count, fi].set_position([fi / (figuresize-1), (4-count) / 4, 1/6, 1/4 - 0.02], which='both') # [left, bottom, width, height]

            # if count == 0:
            #     axarr[count, fi].title.set_text('{}'.format(filter_names[fi]))
            #     axarr[count, fi].title.set_size(200)

            if count == 4:
                axarr[count, fi].set_xlabel('{}'.format(filter_names[fi]), labelpad=10, fontsize=fontsize_axes)

            if fi == 0:
                # axarr[count, fi].set_ylabel(uid, labelpad=10, fontsize=fontsize_axes)
                axarr[count, fi].set_ylabel('{}\nID {}'.format(field_label[int(field_AD[i])], str(int(id_AD[i]))), labelpad=10, fontsize=fontsize_axes)


            axarr[count, fi].xaxis.set_tick_params(which='major', size=0, width=0)
            axarr[count, fi].xaxis.set_tick_params(which='minor', size=0, width=0)
            axarr[count, fi].xaxis.set_tick_params(labelsize=0)
            axarr[count, fi].yaxis.set_tick_params(which='major', size=0, width=0)
            axarr[count, fi].yaxis.set_tick_params(which='minor', size=0, width=0)
            axarr[count, fi].yaxis.set_tick_params(labelsize=0)

            print('LESTER', count, fi, np.percentile(cutout.data.flatten(), 97), max(cutout.data.flatten()))
            # axarr[count, fi].imshow(cutout.data, origin='lower', cmap='plasma', aspect='auto', vmax=0.04)


            axarr[count, fi].imshow(cutout.data, origin='lower', vmin=0, vmax=np.percentile(cutout.data.flatten(), 97), cmap='plasma', aspect='auto')
            # axarr[count, fi].plot((0,0))
    #        plt.colorbar()
            # axarr[count, fi].imshow(cutout.data, origin='lower', vmin=0, vmax=np.percentile(cutout.data.flatten(), 95))
            # axarr[count, fi].axis('off')


# f.tight_layout()
if save:
    plt.savefig('panels.png', dpi=300, transparent=False, bbox_inches='tight')
plt.show()
