
# =============================================================================
# Parameter vs redshift, in redshift bins, slope, intercept and scatter
# =============================================================================

def redshift_bins_2(rc_0_c1, rc_0_c2, rc_0_c3, rc_0_c4, rc_0_c5, rc_OL_c1, rc_OL_c2, rc_OL_c3, rc_OL_c4, rc_OL_c5, rc_sig_c1, rc_sig_c2, rc_sig_c3, rc_sig_c4, rc_sig_c5, figuresize, fontsize_legend, fontsize_axes, string_slope, string_normalisation, string_scatter, string_pbad, string_outlier_mean, string_outlier_sigma, string_redshift, save):

    import matplotlib.pyplot as plt
    import matplotlib as mpl

    fig = plt.figure(figsize=(2*figuresize, 1*figuresize))
    xlow = 0.3
    xhigh = 6.7

    param = ['alpha', 'beta', 'sig0', 'pbad']

    ax1 = fig.add_axes([0, 2.5, 0.5, 0.5]) #[left, bottom, width, height]
    ax2 = fig.add_axes([0, 2.0, 0.5, 0.5]) #[left, bottom, width, height]
    ax3 = fig.add_axes([0, 1.5, 0.5, 0.5]) #[left, bottom, width, height]

    axes = [ax1,ax2,ax3]

    for ax in axes:
        ax.set_xlim(xlow, xhigh)
        ax.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
        ax.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
        ax.xaxis.set_tick_params(which='major', size=10, width=2, direction='in', bottom='on', top='on')
        ax.xaxis.set_tick_params(which='minor', size=0, width=0, direction='in', bottom='on', top='on')
        ax.yaxis.set_tick_params(which='major', size=10, width=2, direction='in', left='on', right='on')
        ax.yaxis.set_tick_params(which='minor', size=5, width=2, direction='in', left='on', right='on')
        ax.yaxis.set_tick_params(labelsize=fontsize_axes)

    # redshift bins
    for rc in [rc_0_c1, rc_0_c2, rc_0_c3, rc_0_c4, rc_0_c5]:
        for a, ax in enumerate(axes):
            ax.plot(rc.item().get('z'), rc.item().get('{}_50_arr'.format(param[a])), color='red', linestyle=(0, (4,4,0,0)), linewidth=3, zorder=3)
            # ax.fill_between(rc.item().get('z'), rc.item().get('{}_16_arr'.format(param[a])), rc.item().get('{}_84_arr'.format(param[a])), alpha=0.3, color='tab:blue', zorder=0)

    for rc in [rc_OL_c1, rc_OL_c2, rc_OL_c3, rc_OL_c4, rc_OL_c5]:
        for a, ax in enumerate(axes):
            ax.plot(rc.item().get('z'), rc.item().get('{}_50_arr'.format(param[a])), color='black', linewidth=3, zorder=0)
            ax.fill_between(rc.item().get('z'), rc.item().get('{}_16_arr'.format(param[a])), rc.item().get('{}_84_arr'.format(param[a])), alpha=0.1, color='blue', zorder=0, edgecolor='w')

    for rc in [rc_sig_c1, rc_sig_c2, rc_sig_c3, rc_sig_c4, rc_sig_c5]:
        for a, ax in enumerate(axes):
            ax.plot(rc.item().get('z'), rc.item().get('{}_50_arr'.format(param[a])), color='lime', linestyle=(4, (4,4,0,0)), linewidth=3, zorder=2)
            # ax.fill_between(rc.item().get('z'), rc.item().get('{}_16_arr'.format(param[a])), rc.item().get('{}_84_arr'.format(param[a])), alpha=0.3, color='tab:blue', zorder=0)

    # layout
    ylim_low = [0.81, 0.61, 0.01]
    ylim_high = [2.79, 1.59, 0.79]
    string = [string_normalisation, string_slope, string_scatter]
    ticker_maj = [0.4, 0.2, 0.2]
    ticker_min = [0.2, 0.1, 0.1]
    for a, ax in enumerate(axes):
        ax.set_ylim(ylim_low[a], ylim_high [a])
        ax.set_ylabel(string[a], labelpad=10)
        ax.yaxis.set_major_locator(mpl.ticker.MultipleLocator(ticker_maj[a]))
        ax.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(ticker_min[a]))

    ax3.set_xlabel(string_redshift, labelpad=10)
    ax3.xaxis.set_tick_params(labelsize=fontsize_axes)

    ax1.plot(0, 0, color='red', linestyle='dashed', label='OL-Minimal', linewidth=3)
    ax1.plot(0, 0, color='black', label='OL-Gauss', linewidth=3)
    ax1.plot(0, 0, color='lime', linestyle='dashed', label='OL-Clipped', linewidth=3)
    ax1.legend(bbox_to_anchor=(0.3, 0.95), frameon=True, fontsize=fontsize_legend)

    if save:
        plt.savefig('redshift_bins_2.png', dpi=300, transparent=False, bbox_inches='tight')
    plt.show()
