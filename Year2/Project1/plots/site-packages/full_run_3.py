

# def full_run_2(rc_29_20_c1, rc_29_20_c2, rc_31_20_c3, rc_31_20_c4, rc_34_24_c, normalisation, figuresize, fontsize_legend, fontsize_axes, string_slope, string_normalisation, string_ssfr, save):

def full_run_3(chain_MS_29_c1, chain_MS_29_c2, chain_MS_29_c3, chain_MS_29_c4, chain_MS_29_c5, s29z1, s29z2, s29z3, s29z4, s29z5, rc_c1, rc_c2, rc_c3, rc_c4, rc_c5, rc_c, normalisation, figuresize, fontsize_legend, fontsize_axes, string_slope, string_normalisation, string_scatter, string_ssfr, string_redshift, save):

    import numpy as np
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    from astropy.cosmology import FlatLambdaCDM

    # Import required packages
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import numpy as np
    from pylab import cm
    import matplotlib.font_manager as fm
    import pickle
    from scipy.stats import norm, multivariate_normal
    import corner
    from astropy.cosmology import FlatLambdaCDM
    from astropy.io import fits
    import matplotlib.colors as mcolors
    import matplotlib.patches as mpatches
    from scipy.optimize import curve_fit
    import copy
    import sys

    def get_medians(chain_MS):
    #    names = chain_original.dtype.names
        names = ['alphaN_a', 'alphaN_b', 'beta_a', 'beta_b', 'sig0', 'k', 'pbad', 'outlier_mean', 'outlier_sigma']
        dic = {}
        for name in names:
            dic[name] = np.median(chain_MS[name])
        return dic

    lw = 3


    #%%
    # =============================================================================
    # ssfr and scatter vs redshift
    # =============================================================================

    fig = plt.figure(figsize=(2*figuresize, 1.5*figuresize))
    xlow = -0.3
    xhigh = 7.3

    param = ['ssfr']

    ax1 = fig.add_axes([0, 0.0, 0.5, 0.5]) #[left, bottom, width, height]

    axes = [ax1]

    for ax in [ax1]:
        ax.set_xlim(xlow, xhigh)
        ax.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
        ax.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
        ax.xaxis.set_tick_params(which='major', size=10, width=2, direction='out')
        ax.xaxis.set_tick_params(which='minor', size=0, width=2, direction='out')
        ax.yaxis.set_tick_params(which='major', size=10, width=2, direction='out')
        ax.yaxis.set_tick_params(which='minor', size=0, width=2, direction='out')
        ax.yaxis.set_tick_params(labelsize=fontsize_axes)

    for rc in [rc_c]:
        for a, ax in enumerate([ax1]):
            ax.plot(rc.item().get('z'), rc.item().get('{}_50_arr'.format(param[a])), color='red', linewidth=lw)
            ax.fill_between(rc.item().get('z'), rc.item().get('{}_16_arr'.format(param[a])), rc.item().get('{}_84_arr'.format(param[a])), alpha=0.3, color='red', zorder=0)

    # layout
    ylim_low = [-10.5]
    ylim_high = [-7.3]
    string = [string_ssfr]
    ticker_maj = [1.0]
    ticker_min = [0.1, 0.1]
    for a, ax in enumerate(axes):
        ax.set_ylim(ylim_low[a], ylim_high [a])
        ax.set_ylabel(string[a], labelpad=10)
        ax.yaxis.set_major_locator(mpl.ticker.MultipleLocator(ticker_maj[a]))
        ax.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(ticker_min[a]))

    # literature ssfr
    mpl.rcParams.update({'errorbar.capsize': 5})




    # =============================================================================
    # Santini+17 'True' values - delayed SFH, SFR from UV slope
    # =============================================================================
    # logSFR = alpha log(M / M_9.7) + beta
    z_san = np.array((1.65, 2.5, 3.5, 4.5, 5.5))
    A_san = np.array((1.04, 1.16, 1.02, 0.94, 0.92))
    A_err_san = np.array((0.03, 0.03, 0.04, 0.06, 0.15))
    B_san = np.array((1.01, 1.22, 1.37, 1.37, 1.99))
    B_err_san = np.array((0.04, 0.03, 0.03, 0.05, 0.13))

    # converting normalisation
    alpha_san = B_san - 9.7*A_san
    alpha_err_san = (B_err_san**2 + (9.7*A_err_san)**2) ** 0.5
    beta_san = A_san
    beta_err_san = A_err_san
    alpha_san_n = alpha_san + (normalisation*beta_san) # santini normalised
    alpha_err_san_n = (alpha_err_san**2 - (normalisation*beta_err_san)**2) ** 0.5

    z_s17s = np.array([1.657, 2.498, 3.5, 4.5093, 5.5039])
    ssfr_s17s = np.array([0.3139, 0.5188, 0.6712, 0.6665, 1.2953]) - 9.0

    # =============================================================================
    # Santini+17 Original values - obtained by eye - delayed SFH, SFR from UV slope
    # =============================================================================
    # logSFR = alpha log(M / M_9.7) + beta
    z_san0 = np.array((1.65, 2.5, 3.5, 4.5, 5.5))
    A_san0 = np.array((1.05, 1.1, 0.9, 0.75, 0.55))
    A_err_san0 = np.array((0.03, 0.03, 0.04, 0.05, 0.18))
    B_san0 = np.array((1.0, 1.15, 1.25, 1.2, 1.5))
    B_err_san0 = np.array((0.05, 0.03, 0.03, 0.06, 0.12))

    # converting normalisation
    alpha_san0 = B_san0 - 9.7*A_san0
    alpha_err_san0 = (B_err_san0**2 + (9.7*A_err_san0)**2) ** 0.5
    beta_san0 = A_san0
    beta_err_san0 = A_err_san0
    alpha_san0_n = alpha_san0 + (normalisation*beta_san0) # santini normalised
    alpha_err_san0_n = (alpha_err_san0**2 - (normalisation*beta_err_san0)**2) ** 0.5

    # Santini+17 Observed
    z_s17 = np.array([1.657, 2.5127, 3.5072, 4.502, 5.5112])
    ssfr_s17 = np.array([0.2662, 0.4282, 0.4949, 0.2424, 0.5615]) - 9.0
    ssfr_p_s17 = np.array([0.5855, 0.5855, 0.7379, 0.4235, 1.2144]) - ssfr_s17 - 9.0
    ssfr_m_s17 = ssfr_s17 + 9.0 - np.array([-0.0482, 0.2852, 0.2472, 0.0661, -0.0911])



    # =============================================================================
    # SANTINI - fig 4
    # =============================================================================

    # Santini scatter can be considered intrinsic convolved with evolution of MS in redshift bin
    # mass bins < 8 - 8.8 - 9.6 - 10.3 >
    # centres of mass bins 8.4, 9.2, 9.95

    # z 1.3 2 3 4 5, centres: 1.65, 2.5, 3.5, 4.5

    # blue stars in fig 4: intrinsic scatter

    M_san = np.array([8.4, 9.2, 9.95])
    # z_san = np.array([1.65, 2.5, 3.5, 4.5]) # use z_san[:-1]

    # BY EYE, can't find numbers in paper
    sig8_san = np.array([0.36,0.27,0.0,0.34])
    sig9_san = np.array([0.35,0.1,0.0,0.23])
    sig9p7_san = np.array([0.1167,0.0333,0.2200,0.1033]) # calculated from linear slope
    sig10_san = np.array([0.0,0.0,0.33,0.04])





    # =============================================================================
    # kurczynski z0.5 - 3 - nice table, also mentions purpose of rescaling which I haven't included here
    # =============================================================================


    #log SFR = a Â´ log M* + b + N (0, sIS).
    z_kurc = np.array(((0.5 + 1.0)/2, (1.0 + 1.5)/2, (1.5 + 2.0)/2, (2.0 + 2.5)/2, (2.5 + 3.0)/2))

    alpha_kurc = np.array((-8.394, -7.474, -7.484, -7.513, -7.729))
    alpha_err_kurc = np.array((0.011, 0.010, 0.011, 0.018, 0.015))
    beta_kurc = np.array((0.919, 0.825, 0.867, 0.849, 0.899))
    beta_err_kurc = np.array((0.017, 0.012, 0.013, 0.021, 0.017))
    alpha_kurc_n = alpha_kurc + (9.7*beta_kurc) # santini normalised

    ssfr_kurc = alpha_kurc_n - 9.7

    # total scatter is available in table 2 (instead of intrinsic)
    # scatter per mass bin is also available in table 2

    #intrinsic scatter
    sig_kurc = np.array([0.427,0.273,0.255,0.281,0.220])
    sig_err_kurc = np.array([0.011,0.009,0.008,0.017,0.017])

    ax1.scatter(z_kurc, ssfr_kurc, label='Kurczynski+16')
    ax1.errorbar(0, 0, ls='none')

    # =============================================================================
    # LEJA - RIDGE (table 1) - assuming lower mass based on fig 4, z0.2 - 3.0 - Chabrier IMF
    # =============================================================================

    # logSFR = a(M - M_t) + c for M > M_t
    # logSFR = b(M - M_t) + c for M < M_t

    b0 = np.array([0.9387,0.005499,-0.02751])
    c0 = np.array([0.3257,0.8805,-0.06114])
    Mt0 = np.array([10.37,0.06952,0.1252])

    z_leja = np.linspace(0.2, 3.0, 100)

    b = b0[0] + b0[1]*z_leja + b0[2]*(z_leja**2)
    c = c0[0] + c0[1]*z_leja + c0[2]*(z_leja**2)
    Mt = Mt0[0] + Mt0[1]*z_leja + Mt0[2]*(z_leja**2)

    alpha_leja_n = b*(9.7 - Mt) + c
    ssfr_leja = alpha_leja_n - 9.7
    beta_leja = b

    ax1.plot(z_leja, ssfr_leja, label='Leja+21')
    ax1.errorbar(0, 0, ls='none')


    # =============================================================================
    # Pearson 2018
    # =============================================================================


    # S = alpha [logM - 10.5] + beta

    z_pears = np.array([0.37,0.66,0.95,1.24,1.59,2.02,2.59,3.23,4.34,5.18])
    z_mid = np.array([(0.2+0.5)/2,(0.5+0.8)/2,(0.8+1.1)/2,(1.1+1.4)/2,(1.4+1.8)/2,(1.8+2.3)/2,(2.3+2.9)/2,(2.9+3.8)/2,(3.8+4.9)/2,(4.9+6.0)/2,])


    beta_pears = np.array([0.43,0.5,0.46,0.48,0.51,0.74,0.83,0.70,0.93,1.00])
    beta_err_pears = np.array([0.09,0.10,0.11,0.09,0.09,0.14,0.15,0.09,0.22,0.22])

    alpha_pears = np.array([0.58,0.92,1.10,1.22,1.31,1.39,1.59,1.77,1.87,1.92])
    alpha_err_pears = np.array([0.09,0.08,0.08,0.07,0.08,0.19,0.20,0.08,0.20,0.21])

    sig_pears = np.array([0.35,0.33,0.34,0.28,0.24,0.29,0.28,0.10,0.15,0.08])
    sig_err_pears = np.array([0.06,0.06,0.06,0.06,0.05,0.08,0.07,0.05,0.08,0.07,0.05,0.07,0.05])


    alpha_pears_n = alpha_pears - beta_pears*(10.5 - 9.7)
    ssfr_pears = alpha_pears_n - 9.7


    ax1.plot(z_pears, ssfr_pears, label='Pearson+18')
    ax1.errorbar(0, 0, ls='none')

    # Salim+07
    z_s07 = np.array([0.0992])
    ssfr_s07 = np.array([-0.8106]) - 9.0
    ssfr_p_s07 = np.array([-0.296]) - ssfr_s07 - 9.0
    ssfr_m_s07 = ssfr_s07 + 9.0 - np.array([-1.2918])

    # Santini+09
    z_s09 = np.array([0.4429, 0.8013, 1.2547, 2.0007])
    ssfr_s09 = np.array([-0.2388, -0.0578, 0.1185, 0.2995]) - 9.0
    ssfr_p_s09 = np.array([0.0566, 0.2376, 0.4187, 0.595]) - ssfr_s09 - 9.0
    ssfr_m_s09 = ssfr_s09 + 9.0 - np.array([-0.5342, -0.358, -0.1817, 4.1691e-3])


    # Reddy+12
    z_r12 = np.array([2.3006, 3.0027])
    ssfr_r12 = np.array([0.3663, 0.3472]) - 9.0
    ssfr_p_r12 = np.array([0.7475, 0.7236]) - ssfr_r12 - 9.0
    ssfr_m_r12 = ssfr_r12 + 9.0 - np.array([-5.3603e-3, -0.0244])

    # de Barros+14
    z_b14 = np.array([3.2294, 3.7121, 4.8237, 5.9062])
    ssfr_b14 = np.array([0.8046, 0.8046, 1.2382, 1.2335]) - 9.0
    ssfr_p_b14 = np.array([1.3002, 1.3145, 1.3096, 1.2906]) - ssfr_b14 - 9.0
    ssfr_m_b14 = ssfr_b14 + 9.0 - np.array([-0.0578, -0.0482, 0.0899, 0.0995])

    # Stark+13
    z_s13 = np.array([3.7999, 4.9774, 5.8916, 5.8916, 6.7911, 6.7911])
    ssfr_s13 = np.array([0.7522, 0.7332, 0.8332, 0.7808, 1.1191, 0.9524]) - 9.0
    ssfr_p_s13 = np.array([1.0715, 1.0476, 1.1048, 1.1048, 1.2859, 1.2859]) - ssfr_s13 - 9.0
    ssfr_m_s13 = ssfr_s13 + 9.0 - np.array([0.4663, 0.4378, 0.4997, 0.4997, 0.676, 0.676])

    # Gonzalez+14
    z_g14 = np.array([3.8072, 5.0212, 5.9135])
    ssfr_g14 = np.array([0.5426, 0.5331, 0.6808]) - 9.0
    ssfr_p_g14 = np.array([0.8285, 0.8237, 0.9762]) - ssfr_g14 - 9.0
    ssfr_m_g14 = ssfr_g14 + 9.0 - np.array([0.2376, 0.2328, 0.3806])

    # Bouwens+12
    z_b12 = np.array([4.0046, 5.0066, 6.0086, 7.208])
    ssfr_b12 = np.array([0.7141, 0.6855, 0.4997, 0.7284]) - 9.0
    ssfr_p_b12 = np.array([1.0048, 0.9762, 0.7904, 0.8475]) - ssfr_b12 - 9.0
    ssfr_m_b12 = ssfr_b12 + 9.0 - np.array([0.4139, 0.3853, 0.1995, 0.6236])

    # Marmol-Queralto+16
    z_m16 = np.array([4.385])
    ssfr_m16 = np.array([0.7284]) - 9.0
    ssfr_p_m16 = np.array([1.0286]) - ssfr_m16 - 9.0
    ssfr_m_m16 = ssfr_m16 + 9.0 - np.array([0.433])

    # Menci et al. (2014) SAM
    z_m14 = np.array([0.1504, 0.3624, 0.5819, 0.8525, 1.0719, 1.4522, 1.8763, 2.403, 2.9149, 3.4487, 4.0632, 4.8969, 5.6429, 6.228, 6.7473])
    ssfr_m14 = np.array([-1.0965, -0.9297, -0.8154, -0.6915, -0.5867, -0.458, -0.3389, -0.215, -0.1197, -0.0339, 0.0661, 0.1948, 0.3139, 0.4139, 0.514]) - 9.0






    ax1.scatter(z_s07, ssfr_s07, label='Salim+07')
    ax1.errorbar(z_s07, ssfr_s07, yerr=(ssfr_m_s07, ssfr_p_s07), ls='none')

    ax1.scatter(z_s09, ssfr_s09, label='Santini+09')
    ax1.errorbar(z_s09, ssfr_s09, yerr=(ssfr_m_s09, ssfr_p_s09), ls='none')

    ax1.scatter(z_s17, ssfr_s17, label='Santini+17 Observed')
    ax1.errorbar(z_s17, ssfr_s17, yerr=(ssfr_m_s17, ssfr_p_s17), ls='none')

    ax1.scatter(z_s17s, ssfr_s17s, label='Santini+17 Simulation')
    ax1.errorbar(0, 0, ls='none')

    ax1.scatter(z_r12, ssfr_r12, label='Reddy+12')
    ax1.errorbar(z_r12, ssfr_r12, yerr=(ssfr_m_r12, ssfr_p_r12), ls='none')

    ax1.scatter(z_b14, ssfr_b14, label='de Barros+14')
    ax1.errorbar(z_b14, ssfr_b14, yerr=(ssfr_m_b14, ssfr_p_b14), ls='none')

    ax1.scatter(z_s13, ssfr_s13, label='Stark+13')
    ax1.errorbar(z_s13, ssfr_s13, yerr=(ssfr_m_s13, ssfr_p_s13), ls='none')

    ax1.scatter(z_g14, ssfr_g14, label='Gonzalez+14')
    ax1.errorbar(z_g14, ssfr_g14, yerr=(ssfr_m_g14, ssfr_p_g14), ls='none')

    ax1.scatter(z_b12, ssfr_b12, label='Bouwens+12')
    ax1.errorbar(z_b12, ssfr_b12, yerr=(ssfr_m_b12, ssfr_p_b12), ls='none')

    ax1.scatter(z_m16, ssfr_m16, label='Marmol-Queralto+16')
    ax1.errorbar(z_m16, ssfr_m16, yerr=(ssfr_m_m16, ssfr_p_m16), ls='none')


    ax1.plot(0, 0, color='red', label='Our Work', linewidth=lw)
    ax1.plot(z_m14, ssfr_m14, label='Menci et al. (2014) SAM', color='tab:grey', linestyle=':')

    z_225 = np.linspace(0, 10, 1000)
    idx = np.absolute(rc_c.item().get('z')-2.0).argmin()
    ax1.plot(z_225, (np.log10((1+z_225)**2.25) - 9.0) * (rc_c.item().get('ssfr_50_arr')[idx] / (np.log10((1+2.0)**2.25) - 9.0)), color='tab:grey', linestyle='--', label='$\sim(1+z)^{2.25}$') # normalise Dekel et al. 2009 to z=2

    ax1.legend(loc='lower right', frameon=False, fontsize=1.26*fontsize_legend, ncol=2)

    plt.text(0, -7.6, r'$\log(M \, / \, \mathrm{M_{\odot}}) \sim 9.7$')

    ax1.set_xlabel(string_redshift, labelpad=10)
    ax1.xaxis.set_tick_params(labelsize=fontsize_axes)

    if save:
        plt.savefig('ssfr_vs_redshift.png', dpi=300, transparent=False, bbox_inches='tight')
    plt.show()





    #%%




    # =============================================================================
    # Speagle+14 - errors calculated dodgily
    # =============================================================================
    # log SFR(Mâ, t) = (0.84 Â± 0.02 â 0.026 Â± 0.003 Ã t ) logMââ(6.51 Â± 0.24 â 0.11 Â± 0.03 Ã t ), where t is the age of the universe in Gyr.

    cosmo = FlatLambdaCDM(H0=70, Om0=0.3)

    z_speagle = np.linspace(0.5, 6.5, 1000)
    t_speagle = cosmo.age(z_speagle).value # Gyr

    alpha_speagle = -(6.51 - (0.11*t_speagle) )
    alpha_err_speagle = 0.24 + (0.03*t_speagle)
    beta_speagle = 0.84 - (0.026*t_speagle)
    beta_err_speagle = 0.02 + (0.003*t_speagle)
    alpha_speagle_n = alpha_speagle + (normalisation*beta_speagle) # santini normalised

    # =============================================================================
    # Schreiber+15 - ignoring high mass
    # =============================================================================
    #r â¡ log10(1 + z) and m â¡ log10(Mâ/10**9 M):
    #log10(SFRMS[M/yr]) = m â m0 + a0r â a1 max(0,m â m1 â a2 r)**2,
    #with m0 = 0.5 Â± 0.07, a0 = 1.5 Â± 0.15, a1 = 0.3 Â± 0.08, m1 = 0.36 Â± 0.3 and a2 = 2.5 Â± 0.6.

    z_schreiber = np.linspace(0.5, 4.0, 1000)
    r_schreiber = np.log10(1+z_schreiber)

    m0_schreiber = 0.5
    a0_schreiber = 1.5
    #a1 = 0.3
    #m1 = 0.36
    #a2 = 2.5

    # m - m1 - a2r is usually < 0, except high mass, low redshift, IGNORED FOR NOW
    #print( np.log10((10**9.9)/(1e9))- m1 - (a2*r_schreiber))

    alpha_schreiber = - (9.0 + m0_schreiber - (a0_schreiber*r_schreiber))
    beta_schreiber = np.linspace(1.0, 1.0, 1000)
    alpha_schreiber_n = alpha_schreiber + (normalisation*beta_schreiber) # santini normalised

    # =============================================================================
    # Salmon+15
    # =============================================================================
    #log(SFR/M yrâ1) = a log(M/M) + b
    z_salmon = np.array((4.0, 5.0, 6.0))

    alpha_salmon = np.array((-5.7, -4.4, -3.9))
    alpha_err_salmon = np.array((2.1, 2.6, 1.6))
    beta_salmon = np.array((0.7, 0.59, 0.54))
    beta_err_salmon = np.array((0.21, 0.26, 0.16))
    alpha_salmon_n = alpha_salmon + (normalisation*beta_salmon) # santini normalised

    # =============================================================================
    # Steinhardt+14
    # =============================================================================
    #log SFR(M yrâ1) = Î± Ã (logMâ/M â 10.5) + Î²,
    z_steinhardt = np.array(((4.0 + 4.8)/2, (4.8 + 6.0)/2))

    beta_steinhardt = np.array((0.78, 0.78))
    beta_err_steinhardt = np.array((0.02, 0.02))
    alpha_steinhardt = np.array((1.976, 2.110)) - (10.5*beta_steinhardt)
    alpha_steinhardt_n = alpha_steinhardt + (normalisation*beta_steinhardt) # santini normalised

    # =============================================================================
    # Tomczak+16 - Not obvious how to get these, also maybe not just star forming?!
    # =============================================================================

    # =============================================================================
    # Schreiber+16 - single point, hard to find paper
    # =============================================================================





    # =============================================================================
    # THE PLOT
    # =============================================================================

    fig = plt.figure(figsize=(2*figuresize, 1*figuresize))
    xlow = 0.3
    xhigh = 6.7

    param = ['alpha', 'beta', 'sig0']

    ax1 = fig.add_axes([0, 1.0, 0.5, 0.5]) #[left, bottom, width, height]
    ax2 = fig.add_axes([0, 0.5, 0.5, 0.5]) #[left, bottom, width, height]
    ax3 = fig.add_axes([0, 0.0, 0.5, 0.5]) #[left, bottom, width, height]

    axes = [ax1,ax2,ax3]

    ax2.scatter(z_salmon, beta_salmon, label='Salmon+15')
    ax2.errorbar(z_salmon, beta_salmon, yerr=beta_err_salmon, ls='none')
    ax2.scatter(z_steinhardt, beta_steinhardt, label='Steinhardt+14')
    ax2.errorbar(z_steinhardt, beta_steinhardt, yerr=beta_err_steinhardt, ls='none')
    ax2.scatter(z_san0, beta_san0, label='Santini+17 Observed')
    ax2.errorbar(z_san0, beta_san0, yerr=beta_err_san0, ls='none')
    ax2.scatter(z_san, beta_san, label='Santini+17 Simulation')
    ax2.errorbar(z_san, beta_san, yerr=beta_err_san, ls='none')
    ax2.scatter(z_kurc, beta_kurc, label='Kurczynski+16')
    ax2.errorbar(z_kurc, beta_kurc, yerr=beta_err_kurc, ls='none')
    ax2.plot(z_speagle, beta_speagle, label='Speagle+14', linestyle=':', color='tab:grey')
    ax2.plot(z_schreiber, beta_schreiber, label='Schreiber+15', linestyle='dashed', color='tab:grey')
    ax2.plot(z_leja, beta_leja, label='Leja+21')
    ax2.plot(z_pears, beta_pears, label='Pearson+18')


    alpha_err_salmon_n = np.zeros(len(alpha_salmon_n))
    alpha_err_steinhardt_n = np.zeros(len(alpha_steinhardt_n))
    alpha_err_kurc_n = np.zeros(len(alpha_kurc_n))


    ax1.scatter(z_salmon, alpha_salmon_n, label='Salmon+15')
    ax1.errorbar(z_salmon, alpha_salmon_n, yerr=alpha_err_salmon_n, ls='none')
    ax1.scatter(z_steinhardt, alpha_steinhardt_n, label='Steinhardt+14')
    ax1.errorbar(z_steinhardt, alpha_steinhardt_n, yerr=alpha_err_steinhardt_n, ls='none')
    ax1.scatter(z_san0, alpha_san0_n, label='Santini+17 Observed')
    ax1.errorbar(z_san0, alpha_san0_n, yerr=alpha_err_san0_n, ls='none')
    ax1.scatter(z_san, alpha_san_n, label='Santini+17 Simulation')
    ax1.errorbar(z_san, alpha_san_n, yerr=alpha_err_san_n, ls='none')
    ax1.scatter(z_kurc, alpha_kurc_n, label='Kurczynski+16')
    ax1.errorbar(z_kurc, alpha_kurc_n, yerr=alpha_err_kurc_n, ls='none')
    ax1.plot(z_speagle, alpha_speagle_n, label='Speagle+14', linestyle=':', color='tab:grey')
    ax1.plot(z_schreiber, alpha_schreiber_n, label='Schreiber+15', linestyle='dashed', color='tab:grey')
    ax1.plot(z_leja, alpha_leja_n, label='Leja+21')
    ax1.plot(z_pears, alpha_pears_n, label='Pearson+18')

    ax3.scatter(0, 0, label='Salmon+15')
    ax3.scatter(0, 0, label='Steinhardt+14')
    ax3.scatter(0, 0, label='Santini+17 Observed')
    ax3.scatter(0, 0, label='Santini+17 Simulation')
    # ax3.scatter(0, 0, label='Kurczynski+16')
    ax3.plot(0, 0, label='Our Work, 1.25 $<$ z $<$ 6.0', color='red')
    ax3.plot(0, 0, label='Our Work, redshift bins', color='blue')
    ax3.plot(0, 0, label='Speagle+14', linestyle=':', color='tab:grey')
    ax3.plot(0, 0, label='Schreiber+15', linestyle='dashed', color='tab:grey')
    ax3.plot(0, 0, label='Leja+21')
    ax3.plot(z_pears, sig_pears, label='Pearson+18')

    # ax3.scatter(z_san[:-1], sig8_san, label='San8')
    ax3.plot(z_san[:-1], sig9_san, label='San9')
    # ax3.scatter(z_san[:-1], sig9p7_san, label='San9p7')
    # ax3.scatter(z_san[:-1], sig10_san, label='San10')
    ax3.plot(z_kurc, sig_kurc, label='Kurczynski+16')

    for ax in [ax1,ax2,ax3]:
        ax.set_xlim(xlow, xhigh)
        ax.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
        ax.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
        ax.xaxis.set_tick_params(which='major', size=10, width=2, direction='in', bottom='on', top='on')
        ax.xaxis.set_tick_params(which='minor', size=0, width=2, direction='in', bottom='on', top='on')
        ax.yaxis.set_tick_params(which='major', size=10, width=2, direction='in', left='on', right='on')
        ax.yaxis.set_tick_params(which='minor', size=0, width=2, direction='in', left='on', right='on')
        ax.yaxis.set_tick_params(labelsize=fontsize_axes)

    # redshift bins
    #for rc in [rc_268, rc_269, rc_270, rc_273]:
    #    for a, ax in enumerate(axes):
    #        ax.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='black')
    ##        ax.fill_between(rc['z'], rc['{}_16_arr'.format(param[a])], rc['{}_84_arr'.format(param[a])], alpha=0.3, color='tab:blue', zorder=0)

    for rc in [rc_c1, rc_c2, rc_c3, rc_c4, rc_c5]:
        for a, ax in enumerate(axes):
            ax.plot(rc.item().get('z'), rc.item().get('{}_50_arr'.format(param[a])), color='k')
            ax.fill_between(rc.item().get('z'), rc.item().get('{}_16_arr'.format(param[a])), rc.item().get('{}_84_arr'.format(param[a])), alpha=0.1, color='blue', zorder=0, edgecolor='w')

    for rc in [rc_c]:
        for a, ax in enumerate(axes):
            ax.plot(rc.item().get('z'), rc.item().get('{}_50_arr'.format(param[a])), color='red')
            ax.fill_between(rc.item().get('z'), rc.item().get('{}_16_arr'.format(param[a])), rc.item().get('{}_84_arr'.format(param[a])), alpha=0.3, color='red', zorder=0, edgecolor='w')

    #
    #for rc in [rc_cla]:
    #    for a, ax in enumerate(axes):
    #        ax.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='tab:cyan', linestyle='dashed')
    #
    #for rc in [rc_cp1, rc_cp2, rc_cp3, rc_cp4, rc_cp]:
    #    for a, ax in enumerate(axes):
    #        ax.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='tab:magenta')
    #
    #for rc in [rc_cpla]:
    #    for a, ax in enumerate(axes):
    #        ax.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='tab:magenta', linestyle='dashed')
    #
    #for rc in [rc_265, rc_274]:
    #    for a, ax in enumerate(axes):
    #        ax.plot(rc['z'], rc['{}_50_arr'.format(param[a])])

    # layout
    ylim_low = [0.1, 0.2, 0.00]
    ylim_high = [2.4, 1.4, 0.79]
    string = [string_normalisation, string_slope, string_scatter]
    ticker_maj = [0.5, 0.4, 0.2]
    ticker_min = [0.2, 0.1, 0.1]
    for a, ax in enumerate(axes):
        ax.set_ylim(ylim_low[a], ylim_high [a])
        ax.set_ylabel(string[a], labelpad=10)
        ax.yaxis.set_major_locator(mpl.ticker.MultipleLocator(ticker_maj[a]))
        ax.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(ticker_min[a]))

    ax3.set_xlabel(string_redshift, labelpad=10)
    ax3.xaxis.set_tick_params(labelsize=fontsize_axes)

    #ax3.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='black', label='original z bins')
    #ax3.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='tab:cyan', label='z bins and full run (c)')
    #ax3.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='tab:cyan', linestyle='dashed', label='full run linear alpha (c)')
    #ax3.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='tab:magenta', label='z bins and full run (cp)')
    #ax3.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='tab:magenta', linestyle='dashed', label='full run linear alpha (cp)')
    #ax3.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='tab:#1f77b4', label='original beta == 1')
    #ax3.plot(rc['z'], rc['{}_50_arr'.format(param[a])], color='tab:#ff7f0e', label='original beta == const, z$<$4')
    ax3.legend(loc='upper left', frameon=False, fontsize=1.22*fontsize_legend, ncol=2)

    if save:
        plt.savefig('fullrun_vs_redshift.png', dpi=300, transparent=False, bbox_inches='tight')
    plt.show()
