from astropy.io import fits
import numpy as np
import sys
import os
from astropy.table import Table
from collections import OrderedDict
import matplotlib.pyplot as plt

import matplotlib as mpl

# Edit the font, font size, and axes width
mpl.rcParams['font.family'] = 'Arial'
mpl.rc('image', cmap='jet')
cmap = mpl.cm.get_cmap('jet')
plt.rcParams['font.size'] = 24
plt.rcParams['axes.linewidth'] = 2
plt.rcParams['text.usetex'] = False
# plt.rcParams['text.usetex'] = True

figuresize = 7
fontsize_legend = 14
fontsize_axes = 20

z_lower = 1.25
z_upper = 2.0


# LestersSummary = fits.open("/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/plots/overleaf_BEAGLE_dust_install/scatter_plots/scenario_29_clusters_z1p25-6p0.fits")
LestersSummary = fits.open("/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/plots/overleaf_BEAGLE_dust_install/scatter_plots/scenario_33_clusters_z1p25-6p0.fits")

photometry = fits.open("/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/plots/overleaf_BEAGLE_dust_install/scatter_plots/astrodeep_burst_run_subset_RF1_001.fits")
BeagleBurstSummary = fits.open("/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/plots/overleaf_BEAGLE_dust_install/scatter_plots/BEAGLE_summary_catalogue_delayed_plus_burst.fits")
BeagleTauSummary = fits.open("/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/plots/overleaf_BEAGLE_dust_install/scatter_plots/BEAGLE_summary_catalogue_delayed_diff_tau_prior.fits")

#I don't have the credible intervals for the original fits so they will have to be added by lester

#To prevent the matching having to be done every single time this is run, I'll check if the matched file is there or not - if anything needs to be added to this file (like the credible intervals) then edit this next section and remove the file from the working folder before running!

if os.path.isfile("/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/plots/overleaf_BEAGLE_dust_install/scatter_plots/matchedCatalogue_scenario_33.fits"):
  print("matchedCatalogue.fits already there, reading this in...")
  matchedCat=fits.open("/Users/lester/Documents/GitHub/Local-Python/Year2/Project1/plots/overleaf_BEAGLE_dust_install/scatter_plots/matchedCatalogue_scenario_33.fits")
else:

  LestersUID = []
  for i in range(len(LestersSummary[1].data['field_AD'])):
    LestersUID.append( str(np.int(LestersSummary[1].data['field_AD'][i]))+'_'+str(np.int(LestersSummary[1].data['id_AD'][i])))

  LestersUID = np.array(LestersUID)
  print(LestersUID)

  id = []
  redshiftOrig = []
  massOrig = []
  sfrOrig = []
  redshiftBurst = []
  redshiftErrBurst = []
  massBurst = []
  massErrBurst = []
  sfrBurst = []
  sfrErrBurst = []
  redshiftTau = []
  redshiftErrTau = []
  massTau = []
  massErrTau = []
  sfrTau = []
  sfrErrTau = []

  for i in range(len(photometry[1].data['ID'])):
    matchOrig = np.where(LestersUID == photometry[1].data['UID'][i])[0]
    if len(matchOrig) == 1:
      id.append(photometry[1].data['UID'][i])
      redshiftOrig.append(LestersSummary[1].data['redshift_BEAGLE'][matchOrig])
      massOrig.append(LestersSummary[1].data['mass_BEAGLE_stellar'][matchOrig])
      sfrOrig.append(LestersSummary[1].data['sfr_BEAGLE_instant'][matchOrig])


      matchBurst = np.where(BeagleBurstSummary['posterior pdf'].data['ID'] == str(photometry[1].data['ID'][i]))[0]
      if len(matchBurst) == 1:
        redshiftBurst.append(BeagleBurstSummary['posterior pdf'].data['redshift_median'][matchBurst][0])
        redshiftErrBurst.append(np.abs(BeagleBurstSummary['posterior pdf'].data['redshift_68.00'][matchBurst][0]-redshiftBurst[-1]))
        massBurst.append(np.log10(BeagleBurstSummary['galaxy properties'].data['M_star_median'][matchBurst][0]))
        massErrBurst.append(np.abs(np.log10(BeagleBurstSummary['galaxy properties'].data['M_star_68.00'][matchBurst][0])-massBurst[-1]))
        sfrBurst.append(BeagleBurstSummary['posterior pdf'].data['sfr_median'][matchBurst][0])
        sfrErrBurst.append(np.abs(BeagleBurstSummary['posterior pdf'].data['sfr_68.00'][matchBurst][0]-sfrBurst[-1]))
      else:
        redshiftBurst.append(-99)
        redshiftErrBurst.append([-99,-99])
        massBurst.append(-99)
        massErrBurst.append([-99,-99])
        sfrBurst.append(-99)
        sfrErrBurst.append([-99,-99])

      matchTau = np.where(BeagleTauSummary['posterior pdf'].data['ID'] == str(photometry[1].data['ID'][i]))[0]
      if len(matchTau) == 1:
        redshiftTau.append(BeagleTauSummary['posterior pdf'].data['redshift_median'][matchTau][0])
        redshiftErrTau.append(np.abs(BeagleTauSummary['posterior pdf'].data['redshift_68.00'][matchTau][0]-redshiftTau[-1]))
        massTau.append(np.log10(BeagleTauSummary['galaxy properties'].data['M_star_median'][matchTau][0]))
        massErrTau.append(np.abs(np.log10(BeagleTauSummary['galaxy properties'].data['M_star_68.00'][matchTau][0])-massTau[-1]))
        sfrTau.append(np.log10(BeagleTauSummary['star formation'].data['sfr_median'][matchTau][0]))
#        print(BeagleTauSummary['star formation'].data['sfr_68.00'][matchTau][0])
        sfrErrTau.append(np.abs(np.log10(BeagleTauSummary['star formation'].data['sfr_68.00'][matchTau][0])-sfrTau[-1]))
#        print(sfrErrTau[-1])
#        sys.exit()
      else:
        redshiftTau.append(-99)
        redshiftErrTau.append([-99,-99])
        massTau.append(-99)
        massErrTau.append([-99,-99])
        sfrTau.append(-99)
        sfrErrTau.append([-99,-99])

  redshiftOrig = np.array(redshiftOrig)
  massOrig = np.array(massOrig)
  sfrOrig = np.array(sfrOrig)
  redshiftBurst = np.array(redshiftBurst)
  redshiftErrBurst = np.array(redshiftErrBurst)
  massBurst = np.array(massBurst)
  massErrBurst = np.array(massErrBurst)
  sfrBurst = np.array(sfrBurst)
  sfrErrBurst = np.array(sfrErrBurst)
  redshiftBurst = np.array(redshiftBurst)
  redshiftErrTau = np.array(redshiftErrTau)
  massTau = np.array(massTau)
  massErrTau = np.array(massErrTau)
  sfrTau = np.array(sfrTau)
  sfrErrTau = np.array(sfrErrTau)

  print(redshiftErrBurst.shape)
  outputDict = OrderedDict()
  outputDict['UID'] = id
  outputDict['redshiftOrig'] = redshiftOrig.flatten()
  outputDict['massOrig'] = massOrig.flatten()
  outputDict['sfrOrig'] = sfrOrig.flatten()
  outputDict['redshiftBurst'] = redshiftBurst
  outputDict['redshiftErrBurstLow'] = redshiftErrBurst[:,0]
  outputDict['redshiftErrBurstHigh'] = redshiftErrBurst[:,1]
  outputDict['massBurst'] = massBurst
  outputDict['massErrBurstLow'] = massErrBurst[:,0]
  outputDict['massErrBurstHigh'] = massErrBurst[:,1]
  outputDict['sfrBurst'] = sfrBurst
  outputDict['sfrErrBurstLow'] = sfrErrBurst[:,0]
  outputDict['sfrErrBurstHigh'] = sfrErrBurst[:,1]
  outputDict['redshiftTau'] = redshiftTau
  outputDict['redshiftErrTauLow'] = redshiftErrTau[:,0]
  outputDict['redshiftErrTauHigh'] = redshiftErrTau[:,1]
  outputDict['massTau'] = massTau
  outputDict['massErrTauLow'] = massErrTau[:,0]
  outputDict['massErrTauHigh'] = massErrTau[:,1]
  outputDict['sfrTau'] = sfrTau
  outputDict['sfrErrTauLow'] = sfrErrTau[:,0]
  outputDict['sfrErrTauHigh'] = sfrErrTau[:,1]

  for key in outputDict.keys():
    print(key, len(outputDict[key]))

  outputTable = Table(outputDict)
  outputTable.write("matchedCatalogue.fits", overwrite=True)
  matchedCat = fits.open("matchedCatalogue.fits")


#%%
# =============================================================================
# PLOT 1
# =============================================================================
fig = plt.figure(figsize=(figuresize, figuresize))
ax1 = fig.add_axes([0, 0, 0.85, 0.84]) #[left, bottom, width, height]

tempIdx = np.where((matchedCat[1].data['redshiftOrig'] > z_lower) & (matchedCat[1].data['redshiftOrig'] < z_upper) & (matchedCat[1].data['massBurst'] > 0))[0]
print('FEST', len(tempIdx), len(matchedCat[1].data['redshiftOrig']), len(matchedCat[1].data['massBurst']), sum((matchedCat[1].data['redshiftOrig'] > z_lower)), sum((matchedCat[1].data['redshiftOrig'] < z_upper)), sum((matchedCat[1].data['massBurst'] > 0)))
ax1.errorbar(matchedCat[1].data['massBurst'][tempIdx], matchedCat[1].data['sfrBurst'][tempIdx], xerr=[matchedCat[1].data['massErrBurstLow'][tempIdx],matchedCat[1].data['massErrBurstHigh'][tempIdx]], yerr=[matchedCat[1].data['sfrErrBurstLow'][tempIdx],matchedCat[1].data['sfrErrBurstHigh'][tempIdx]], linestyle='', c='tab:grey', zorder=0, lw=0.5, mew=0)

ax1.scatter(matchedCat[1].data['massOrig'][tempIdx], matchedCat[1].data['sfrOrig'][tempIdx], c='blue', label='DE SFH', zorder=1E4,s=50)
ax1.scatter(matchedCat[1].data['massBurst'][tempIdx], matchedCat[1].data['sfrBurst'][tempIdx], zorder=1E5,s=50,c='red', label='DE SFH + BURST')

print('lester', len(matchedCat[1].data['massBurst'][tempIdx]), len(matchedCat[1].data['sfrBurst'][tempIdx]), len(matchedCat[1].data['massErrBurstLow'][tempIdx]), len(matchedCat[1].data['massErrBurstHigh'][tempIdx]), len(matchedCat[1].data['sfrErrBurstLow'][tempIdx]), len(matchedCat[1].data['sfrErrBurstHigh'][tempIdx]), len(matchedCat[1].data['massOrig'][tempIdx]), len(matchedCat[1].data['sfrOrig'][tempIdx]), len(matchedCat[1].data['massBurst'][tempIdx]), len(matchedCat[1].data['sfrBurst'][tempIdx]))

#plot arrows for 5 highest SFR outliers
# outlierIds = ['2_541','2_1192','4_1301','6_2371','6_2907']
# for outlier in outlierIds:
#   tempIdx = np.where(matchedCat[1].data['UID'] == outlier)[0][0]
#   x = matchedCat[1].data['massOrig'][tempIdx]
#   y = matchedCat[1].data['sfrOrig'][tempIdx]
#   dx = matchedCat[1].data['massBurst'][tempIdx]-matchedCat[1].data['massOrig'][tempIdx]
#   dy = matchedCat[1].data['sfrBurst'][tempIdx]-matchedCat[1].data['sfrOrig'][tempIdx]
#   print(x,y,dx,dy)
#   plt.arrow(x,y,dx,dy, zorder=0)


# =============================================================================
# BASICS
# =============================================================================

string_mass = r'$\log(M \, / \, \mathrm{M_{\odot}})$'
string_sfr = r'$\log(\psi \, / \, \mathrm{M_{\odot} \, yr^{-1}})$'

ax1.set_xlim(7.5, 11.5)
ax1.set_xlabel(string_mass, labelpad=10)
ax1.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.xaxis.set_tick_params(which='major', size=10, width=2, direction='in', bottom='on', top='on')
ax1.xaxis.set_tick_params(which='minor', size=5, width=2, direction='in', bottom='on', top='on')
ax1.xaxis.set_tick_params(labelsize=fontsize_axes)

ax1.set_ylim(-5.5, 4.5)
ax1.set_ylabel(string_sfr, labelpad=10)
ax1.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.yaxis.set_tick_params(which='major', size=10, width=2, direction='in', left='on', right='on')
ax1.yaxis.set_tick_params(which='minor', size=5, width=2, direction='in', left='on', right='on')
ax1.yaxis.set_tick_params(labelsize=fontsize_axes)

ax1.text(7.7, 3.5, r'{} $<$ z $<$ {}'.format(str(z_lower), str(z_upper)))

ax1.legend(loc='lower right', frameon=True, fontsize=fontsize_legend, facecolor='w', framealpha=1)


save=True

if save:
    plt.savefig('new_SFH.png', dpi=300, transparent=False, bbox_inches='tight')
plt.show()




#%%
# =============================================================================
# PLOT 2
# =============================================================================
fig = plt.figure(figsize=(figuresize, figuresize))
ax1 = fig.add_axes([0, 0, 0.85, 0.84]) #[left, bottom, width, height]

tempIdx = np.where((matchedCat[1].data['redshiftOrig'] > z_lower) & (matchedCat[1].data['redshiftOrig'] < z_upper) & (matchedCat[1].data['massTau'] > 0) & (matchedCat[1].data['sfrTau'] >= -1.8))[0]
tempIdx2 = np.where((matchedCat[1].data['redshiftOrig'] > z_lower) & (matchedCat[1].data['redshiftOrig'] < z_upper) & (matchedCat[1].data['massTau'] > 0) & (matchedCat[1].data['sfrTau'] < -1.8))[0]
tempIdx3 = np.where((matchedCat[1].data['redshiftOrig'] > z_lower) & (matchedCat[1].data['redshiftOrig'] < z_upper) & (matchedCat[1].data['massTau'] > 0))[0]

plt.errorbar(matchedCat[1].data['massTau'][tempIdx3], matchedCat[1].data['sfrTau'][tempIdx3], xerr=[matchedCat[1].data['massErrTauLow'][tempIdx3],matchedCat[1].data['massErrTauHigh'][tempIdx3]], yerr=[matchedCat[1].data['sfrErrTauLow'][tempIdx3],matchedCat[1].data['sfrErrTauHigh'][tempIdx3]], linestyle='', c='tab:grey', zorder=0, lw=0.5, mew=0)

x_tmp = np.array((10**5, 10**12))
log10_x_tmp = np.log10(x_tmp)
plt.plot(log10_x_tmp, log10_x_tmp - 10 - np.log10(np.exp(1.0)-2.0), c='k', linewidth=3, linestyle='dashed') # ridge if t = tau = 10


plt.scatter(matchedCat[1].data['massOrig'][tempIdx], matchedCat[1].data['sfrOrig'][tempIdx], c='blue', s=10, label=r'$\mathrm{Uniform} \, \log (\tau_\mathrm{SFR})$', zorder=0)
plt.scatter(matchedCat[1].data['massOrig'][tempIdx2], matchedCat[1].data['sfrOrig'][tempIdx2], c='blue', zorder=1, s=100, edgecolors='k', linewidths=1)
plt.scatter(matchedCat[1].data['massTau'][tempIdx], matchedCat[1].data['sfrTau'][tempIdx], zorder=0, s=10, c='red', label=r'$\mathrm{Uniform} \, 1 / \tau_\mathrm{SFR}$')
plt.scatter(matchedCat[1].data['massTau'][tempIdx2], matchedCat[1].data['sfrTau'][tempIdx2], zorder=1, s=100, c='red', edgecolors='k', linewidths=1)

# =============================================================================
# BASICS
# =============================================================================

string_mass = r'$\log(M \, / \, \mathrm{M_{\odot}})$'
string_sfr = r'$\log(\psi \, / \, \mathrm{M_{\odot} \, yr^{-1}})$'

ax1.set_xlim(7.5, 10.5)
ax1.set_xlabel(string_mass, labelpad=10)
ax1.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.xaxis.set_tick_params(which='major', size=10, width=2, direction='in', bottom='on', top='on')
ax1.xaxis.set_tick_params(which='minor', size=5, width=2, direction='in', bottom='on', top='on')
ax1.xaxis.set_tick_params(labelsize=fontsize_axes)

ax1.set_ylim(-5.5, 4.5)
ax1.set_ylabel(string_sfr, labelpad=10)
ax1.yaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
ax1.yaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
ax1.yaxis.set_tick_params(which='major', size=10, width=2, direction='in', left='on', right='on')
ax1.yaxis.set_tick_params(which='minor', size=5, width=2, direction='in', left='on', right='on')
ax1.yaxis.set_tick_params(labelsize=fontsize_axes)

ax1.text(7.7, 3.5, r'{} $<$ z $<$ {}'.format(str(z_lower), str(z_upper)))

ax1.legend(loc='lower right', frameon=True, fontsize=fontsize_legend, facecolor='w', framealpha=1)


save=True

if save:
    plt.savefig('new_SFH_prior.png', dpi=300, transparent=False, bbox_inches='tight')
plt.show()

mpl.rcParams.update(mpl.rcParamsDefault)

# plt.figure()
# tempIdx = np.where((matchedCat[1].data['redshiftOrig'] > z_lower) & (matchedCat[1].data['redshiftOrig'] < z_upper) & (matchedCat[1].data['massTau'] > 0))[0]
# plt.errorbar(matchedCat[1].data['massTau'][tempIdx], matchedCat[1].data['sfrTau'][tempIdx], xerr=[matchedCat[1].data['massErrTauLow'][tempIdx],matchedCat[1].data['massErrTauHigh'][tempIdx]], yerr=[matchedCat[1].data['sfrErrTauLow'][tempIdx],matchedCat[1].data['sfrErrTauHigh'][tempIdx]], fmt='o', ecolor='lightgrey')
# plt.scatter(matchedCat[1].data['massOrig'][tempIdx], matchedCat[1].data['sfrOrig'][tempIdx], c='r', label='orig', zorder=1E4)
# plt.scatter(matchedCat[1].data['massTau'][tempIdx], matchedCat[1].data['sfrTau'][tempIdx], zorder=1E5)
# plt.ylim(-5,5)
# plt.xlabel(r"log(m$_*$/M$_\odot$)")

# plt.ylabel(r"log($\psi_*/M_\odot$ yr$^{-1}$)")
# plt.savefig('tau_z1.pdf')
