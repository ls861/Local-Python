#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 25 04:13:05 2021

@author: lester
"""

from astropy.io import fits
import os
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import savgol_filter
from scipy.interpolate import interp1d
from astropy.io import fits
import matplotlib as mpl
from scipy.ndimage import gaussian_filter


# Edit the font, font size, and axes width
mpl.rcParams['font.family'] = 'Arial'
mpl.rc('image', cmap='jet')
cmap = mpl.cm.get_cmap('jet')
plt.rcParams['font.size'] = 24
plt.rcParams['axes.linewidth'] = 2
plt.rcParams['text.usetex'] = False
# plt.rcParams['text.usetex'] = True

figuresize = 7
fontsize_legend = 12
fontsize_axes = 20

filters = ['HST_ACS_WFC_F435W', 'HST_ACS_WFC_F606W', 'HST_ACS_WFC_F814W', 'HST_WFC3_IR_F105W', 'HST_WFC3_IR_F125W', 'HST_WFC3_IR_F140W', 'HST_WFC3_IR_F160W', 'Paranal_HAWKI_Ks', 'Spitzer_IRAC_I1', 'Spitzer_IRAC_I2']
# filter_label = ['ACS F435W', 'ACS F606W', 'ACS F814W', 'WFC3 F105W', 'WFC3 F125W', 'WFC3 F140W', 'WFC3 F160W', 'HAWK-I Ks', 'IRAC I1 3.6 $\mu m$', 'IRAC I2 4.5 $\mu m$']
filter_label = ['F435W', 'F606W', 'F814W', 'F105W', 'F125W', 'F140W', 'F160W', 'Ks', r'IRAC 3.6 $\mathrm{\mu m}$', r'IRAC 4.5 $\mathrm{\mu m}$']

fileName = '/Users/lester/BEAGLE/Filter_Files/Ascii_Astrodeep/astrodeep_filters.fits'
wl = []
f = []
data_fits = fits.open(fileName)
for i in range(len(filters)):
    wl.append(data_fits['TRANSMISSION'].data[filters[i]][0][0])
    f.append(data_fits['TRANSMISSION'].data[filters[i]][0][1])
data_fits.close()


folder1 = '/Users/lester/BEAGLE/BEAGLE-general/results/paper_mocks/320/' #211 is z1.5, 213 is z6.5
filename1 = 'paper_mock.fits'
filepath1 = folder1+filename1
data1 = fits.open(filepath1)
#print(data.info())

folder6 = '/Users/lester/BEAGLE/BEAGLE-general/results/paper_mocks/320/' #211 is z1.5, 213 is z6.5
filename6 = 'paper_mock.fits'
filepath6 = folder6+filename6
data6 = fits.open(filepath6)
#print(data.info())

# for i in range(len(data1['FULL SED'].data)):
for i in [74-1]:


    # =============================================================================
    # z1.5
    # =============================================================================

    wl1 = np.array(data1['FULL SED WL'].data[0][0]) * (1+1.5) # A
    sp1w = np.array(data1['FULL SED'].data[i]) / (1+1.5) # erg s-1 cm-2 A-1
    sp1f = (3.34*1e4)*(wl1**2)*sp1w*(1e6) # uJy

    wl_max = 55000
    idx = (np.abs(wl1 - wl_max).argmin())
    wl1 = wl1[:idx]
    sp1w = sp1w[:idx]
    sp1f = sp1f[:idx]


    # =============================================================================
    # z6.5
    # =============================================================================

    wl6 = np.array(data6['FULL SED WL'].data[0][0]) * (1+6.5) # A
    sp6w = np.array(data6['FULL SED'].data[i]) / (1+6.5) # erg s-1 cm-2 A-1
    sp6f = (3.34*1e4)*(wl6**2)*sp6w*(1e6) # uJy

    wl_max = 55000
    idx = (np.abs(wl6 - wl_max).argmin())
    wl6 = wl6[:idx]
    sp6w = sp6w[:idx]
    sp6f = sp6f[:idx]


    # =============================================================================
    # attempting to smooth the spectra
    # =============================================================================

#    sp1f_smooth = savgol_filter(sp1f, 201, 4) # window size 51, polynomial order 3
#    ax.plot(wl1, sp1f_smooth/sp1f[-1])


#    f = interp1d(wl1, sp1f/sp1f[-1])
#    xnew = np.arange(min(wl1), max(wl1), 1)
#    ynew = f(xnew)   # use interpolation function returned by `interp1d`
#    ax.plot(xnew, ynew)

#    ynew_smooth = savgol_filter(ynew, 5, 3) # window size 51, polynomial order 3
#    ax.plot(xnew, ynew_smooth)




    # =============================================================================
    # PLOT
    # =============================================================================

    fig, ax = plt.subplots(figsize=(2*figuresize, figuresize))
    # fig.suptitle('{}'.format(i+1))

    for i in range(len(filters)):
        ax.fill_between(wl[i]/10000, -5, 5*f[i]-5, alpha=0.5, label=filter_label[i])

    for i in range(len(filters)):
        ax.plot(wl[i]/10000, 5*f[i]-5)

    #    f1d = interp1d(wl[i], f[i])
    #    x1 = np.arange(min(wl[i]), max(wl[i]), 100)
    #    y1 = f1d(x1)   # use interpolation function returned by `interp1d`
    #    ax.plot(x1, y1)

    #    f1d = interp1d(x1, y1, kind='quadratic')
    #    x2 = np.arange(min(x1), max(x1), 1)
    #    y2 = f1d(x2)   # use interpolation function returned by `interp1d`
    #    ax.fill_between(x2, y2, alpha=0.7, label=filter_label[i])

    # ax.plot(wl1/10000, 21+sp1f/sp1f[-1], c='k')
    # ax.plot(wl6/10000, 1+sp6f/sp6f[-1], c='k')


    func1 = interp1d(wl1/10000, sp1f/sp1f[-1])
    x1 = np.arange(min(wl1/10000), max(wl1/10000), 0.0001)
    y1 = func1(x1)   # use interpolation function returned by `interp1d`

    func6 = interp1d(wl6/10000, sp6f/sp6f[-1])
    x6 = np.arange(min(wl6/10000), max(wl6/10000), 0.0001)
    y6 = func6(x6)   # use interpolation function returned by `interp1d`


    # ax.plot(wl1/10000, gaussian_filter(16+sp1f/sp1f[-1], 2), c='k')
    # ax.plot(wl6/10000, gaussian_filter(8+sp6f/sp6f[-1], 2), c='k')

    # ax.plot(x1, y1, c='k')
    # ax.plot(x6, y6, c='k')

    ax.plot(x1, 6*gaussian_filter(y1, 100), c='k', lw=3, label=r'$z=1.5$')
    ax.plot(x6, 4*gaussian_filter(y6, 100), c='tab:gray', lw=3, label=r'$z=6.5$')



    # ax.plot(x1, x1*0, lw=2, c='k')



    ax.set_xlim(0.,5.5)
    ax.set_xlabel(r'$\lambda \, / \, \mathrm{\mu m}$', labelpad=10)
    ax.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1))
    ax.xaxis.set_minor_locator(mpl.ticker.MultipleLocator(0.5))
    ax.xaxis.set_tick_params(which='major', size=10, width=2, direction='out', bottom='on')
    ax.xaxis.set_tick_params(which='minor', size=5, width=2, direction='out', bottom='on')
    ax.xaxis.set_tick_params(labelsize=fontsize_axes)

    ax.set_ylim(-4.99,19.99)
    ax.set_ylabel(r'$\mathrm{f}_\nu \, / \, \mathrm{\mu Jy}$', labelpad=10)
    ax.set_yticks([])



    plt.legend(loc=(1.04,0.), fontsize=16)

    save=True
    if save:
        plt.savefig('filter_set.png', dpi=300, transparent=False, bbox_inches='tight')
    plt.show()

'''
    #%%




filters = ['HST_ACS_WFC_F435W', 'HST_ACS_WFC_F606W', 'HST_ACS_WFC_F814W', 'HST_WFC3_IR_F105W', 'HST_WFC3_IR_F125W', 'HST_WFC3_IR_F140W', 'HST_WFC3_IR_F160W', 'Paranal_HAWKI_Ks', 'Spitzer_IRAC_I1', 'Spitzer_IRAC_I2']

filter_label = ['ACS F435W', 'ACS F606W', 'ACS F814W', 'WFC3 F105W', 'WFC3 F125W', 'WFC3 F140W', 'WFC3 F160W', 'HAWK-I Ks', 'IRAC I1 3.6 $\mu m$', 'IRAC I2 4.5 $\mu m$']

fileName = '/Users/lester/BEAGLE/Filter_Files/Ascii_Astrodeep/astrodeep_filters.fits'

wl = []
f = []

data_fits = fits.open(fileName)


for i in range(len(filters)):
    wl.append(data_fits['TRANSMISSION'].data[filters[i]][0][0])
    f.append(data_fits['TRANSMISSION'].data[filters[i]][0][1])

data_fits.close()


### PLOT ###

fig, ax = plt.subplots(figsize=(16, 6))
#fig.suptitle('ASTRODEEP Filters')

for i in range(len(filters)):
    ax.fill_between(wl[i], f[i], alpha=0.7, label=filter_label[i])

    f1d = interp1d(wl[i], f[i])
    x1 = np.arange(min(wl[i]), max(wl[i]), 100)
    y1 = f1d(x1)   # use interpolation function returned by `interp1d`
#    ax.plot(x1, y1)

    f1d = interp1d(x1, y1, kind='quadratic')
    x2 = np.arange(min(x1), max(x1), 1)
    y2 = f1d(x2)   # use interpolation function returned by `interp1d`
#    ax.fill_between(x2, y2, alpha=0.7, label=filter_label[i])

ax.set_xlim(0,55000)
ax.set_ylim(0,1)
ax.set_xlabel(r'Wavelength / $\AA$')
ax.set_ylabel('Transmission')
plt.legend()
plt.tight_layout()
#plt.savefig('/Users/lester/Dropbox/PhD/20_Summer/First Year Report/RawFigs/333_AD_filters.png')
plt.show()

### ###  ###

    '''


'''
#%%
folder = '/Users/lester/BEAGLE/BEAGLE-general/results/paper_mocks/320/' #211 is z1.5, 213 is z6.5
filename = 'paper_mock.fits'
filepath = folder+filename
data = fits.open(filepath)
print(data.info())

wl6 = np.array(data['FULL SED WL'].data[0][0]) * (1+6.5) # A
# print(wl)
sp6w = np.array(data['FULL SED'].data[0]) / (1+6.5) # erg s-1 cm-2 A-1
sp6f = (3.34*1e4)*(wl6**2)*sp6w*(1e6) # uJy
# print(sp)

test6 = np.array(data['FULL SED'].data[0])

#plt.plot(test1, test6)
#plt.show()
#
#print(sum(test1-test6))
#
#plt.plot(test1wl, np.log10(test1))
#plt.plot(test1wl, np.log10(test6))
#plt.xlim(0, 2000)
##plt.ylim(0, 1e-19)
#plt.show()





#plt.plot(wl1, sp1w)
#plt.plot(wl6, sp6w)
##plt.xlim(0, 60000)
##plt.ylim(-20, -17)
#plt.show()


#plt.plot(wl1, sp1f)
#plt.plot(wl6, sp6f)
#plt.xlim(0, 10000)
#plt.ylim(0, 1)
#plt.show()






sp1f_smooth = savgol_filter(sp1f, 151, 3) # window size 51, polynomial order 3
plt.plot(wl1, sp1f)
plt.plot(wl1, sp1f_smooth)

#sp6f_smooth = savgol_filter(sp6f, 151, 3) # window size 51, polynomial order 3
#plt.plot(wl6, sp6f)
#plt.plot(wl6, sp6f_smooth)

# plt.xlim(0, 60000)
# plt.ylim(0, 10)

# plt.show()




# print(idx)
# print(np.array(data['FULL SED WL'].data[0][0][idx]))




#from astropy.cosmology import FlatLambdaCDM
#
#cosmo = FlatLambdaCDM(H0=70, Om0=0.3)
#z_med_spe = np.linspace(0.0, 8.0, 100)
#t_med_spe = cosmo.age(z_med_spe).value
#
#t_now = cosmo.age(0.0).value
#print(t_now)
#
#t_age = cosmo.age(6.5).value
#print(t_age)
#
#plt.plot(z_med_spe, t_med_spe, label='age of universe')
#plt.plot(z_med_spe, t_now-t_med_spe, label='lookback time')
#plt.xlabel('redshift')
#plt.ylabel('age of universe / Gyr')
#plt.legend()
#plt.show()





'''
